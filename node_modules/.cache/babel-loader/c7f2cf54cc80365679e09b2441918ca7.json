{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\jazii\\\\Desktop\\\\covid\\\\covid-tracker\\\\src\\\\components\\\\LineGraph\\\\LineGraph.js\";\nimport React, { useState, useEffect } from \"react\";\nimport { Line } from \"react-chartjs-2\";\nimport numeral from \"numeral\";\nimport \"./linegraph.css\";\nconst options = {\n  legend: {\n    display: false\n  },\n  elements: {\n    point: {\n      radius: 0\n    }\n  },\n  maintainAspectRatio: false,\n  tooltips: {\n    mode: \"index\",\n    intersect: false,\n    callbacks: {\n      label: function (tooltipItem, data) {\n        return numeral(tooltipItem.value).format(\"+0,0\");\n      }\n    }\n  },\n  scales: {\n    xAxes: [{\n      type: \"time\",\n      time: {\n        format: \"MM/DD/YY\",\n        tooltipFormat: \"ll\"\n      }\n    }],\n    yAxes: [{\n      gridLines: {\n        display: false\n      },\n      ticks: {\n        // Include a dollar sign in the ticks\n        callback: function (value, index, values) {\n          return numeral(value).format(\"0a\");\n        }\n      }\n    }]\n  }\n};\n\nconst buildDeathRate = data => {\n  let chartData1 = [];\n\n  for (let date in data.cases) {\n    let newDataPoint = {\n      x: date,\n      y: data[\"deaths\"][date] / data[\"recovered\"][date] * 100\n    };\n    chartData1.push(newDataPoint);\n  }\n\n  console.log(chartData1);\n  return chartData1;\n};\n\nconst buildChartData = (data, casesType) => {\n  let chartData = [];\n  let lastDataPoint;\n\n  for (let date in data.cases) {\n    if (lastDataPoint) {\n      let newDataPoint = {\n        x: date,\n        y: data[casesType][date] - lastDataPoint\n      };\n      chartData.push(newDataPoint);\n    }\n\n    lastDataPoint = data[casesType][date];\n  }\n\n  return chartData;\n};\n\nfunction LineGraph({\n  casesType,\n  noOfDays,\n  ...props\n}) {\n  const [data, setData] = useState({});\n  console.log(props);\n  useEffect(() => {\n    if (props.deathRate) {\n      const fetchData = async () => {\n        await fetch(`https://disease.sh/v3/covid-19/historical/all?lastdays=${noOfDays}`).then(response => {\n          return response.json();\n        }).then(data => {\n          let chartData = buildDeathRate(data, casesType);\n          setData(chartData);\n          console.log(chartData); // buildChart(chartData);\n        });\n      };\n\n      fetchData();\n    } else {\n      const fetchData = async () => {\n        await fetch(`https://disease.sh/v3/covid-19/historical/all?lastdays=${noOfDays}`).then(response => {\n          return response.json();\n        }).then(data => {\n          let chartData = buildChartData(data, casesType);\n          setData(chartData);\n          console.log(chartData); // buildChart(chartData);\n        });\n      };\n\n      fetchData();\n    }\n  }, [casesType, noOfDays]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: props.className,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 5\n    }\n  }, (data === null || data === void 0 ? void 0 : data.length) > 0 && /*#__PURE__*/React.createElement(Line, {\n    data: {\n      datasets: [{\n        backgroundColor: `${props.lineCh_bgColor}`,\n        borderColor: `${props.lineCh_brColor}`,\n        data: data\n      }]\n    },\n    options: options,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 9\n    }\n  }));\n}\n\nexport default LineGraph;","map":{"version":3,"sources":["C:/Users/jazii/Desktop/covid/covid-tracker/src/components/LineGraph/LineGraph.js"],"names":["React","useState","useEffect","Line","numeral","options","legend","display","elements","point","radius","maintainAspectRatio","tooltips","mode","intersect","callbacks","label","tooltipItem","data","value","format","scales","xAxes","type","time","tooltipFormat","yAxes","gridLines","ticks","callback","index","values","buildDeathRate","chartData1","date","cases","newDataPoint","x","y","push","console","log","buildChartData","casesType","chartData","lastDataPoint","LineGraph","noOfDays","props","setData","deathRate","fetchData","fetch","then","response","json","className","length","datasets","backgroundColor","lineCh_bgColor","borderColor","lineCh_brColor"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { Line } from \"react-chartjs-2\";\r\nimport numeral from \"numeral\";\r\nimport \"./linegraph.css\";\r\n\r\nconst options = {\r\n  legend: {\r\n    display: false,\r\n  },\r\n  elements: {\r\n    point: {\r\n      radius: 0,\r\n    },\r\n  },\r\n  maintainAspectRatio: false,\r\n  tooltips: {\r\n    mode: \"index\",\r\n    intersect: false,\r\n    callbacks: {\r\n      label: function (tooltipItem, data) {\r\n        return numeral(tooltipItem.value).format(\"+0,0\");\r\n      },\r\n    },\r\n  },\r\n  scales: {\r\n    xAxes: [\r\n      {\r\n        type: \"time\",\r\n        time: {\r\n          format: \"MM/DD/YY\",\r\n          tooltipFormat: \"ll\",\r\n        },\r\n      },\r\n    ],\r\n    yAxes: [\r\n      {\r\n        gridLines: {\r\n          display: false,\r\n        },\r\n        ticks: {\r\n          // Include a dollar sign in the ticks\r\n          callback: function (value, index, values) {\r\n            return numeral(value).format(\"0a\");\r\n          },\r\n        },\r\n      },\r\n    ],\r\n  },\r\n};\r\n\r\nconst buildDeathRate = (data) => {\r\n  let chartData1 = [];\r\n  for (let date in data.cases) {\r\n    let newDataPoint = {\r\n      x: date,\r\n      y: (data[\"deaths\"][date] / data[\"recovered\"][date]) * 100,\r\n    };\r\n    chartData1.push(newDataPoint);\r\n  }\r\n  console.log(chartData1);\r\n  return chartData1;\r\n};\r\n\r\nconst buildChartData = (data, casesType) => {\r\n  let chartData = [];\r\n  let lastDataPoint;\r\n  for (let date in data.cases) {\r\n    if (lastDataPoint) {\r\n      let newDataPoint = {\r\n        x: date,\r\n        y: data[casesType][date] - lastDataPoint,\r\n      };\r\n      chartData.push(newDataPoint);\r\n    }\r\n    lastDataPoint = data[casesType][date];\r\n  }\r\n  return chartData;\r\n};\r\n\r\nfunction LineGraph({ casesType, noOfDays, ...props }) {\r\n  const [data, setData] = useState({});\r\n  console.log(props);\r\n  useEffect(() => {\r\n    if (props.deathRate) {\r\n      const fetchData = async () => {\r\n        await fetch(\r\n          `https://disease.sh/v3/covid-19/historical/all?lastdays=${noOfDays}`\r\n        )\r\n          .then((response) => {\r\n            return response.json();\r\n          })\r\n          .then((data) => {\r\n            let chartData = buildDeathRate(data, casesType);\r\n            setData(chartData);\r\n            console.log(chartData);\r\n            // buildChart(chartData);\r\n          });\r\n      };\r\n\r\n      fetchData();\r\n    } else {\r\n      const fetchData = async () => {\r\n        await fetch(\r\n          `https://disease.sh/v3/covid-19/historical/all?lastdays=${noOfDays}`\r\n        )\r\n          .then((response) => {\r\n            return response.json();\r\n          })\r\n          .then((data) => {\r\n            let chartData = buildChartData(data, casesType);\r\n            setData(chartData);\r\n            console.log(chartData);\r\n            // buildChart(chartData);\r\n          });\r\n      };\r\n\r\n      fetchData();\r\n    }\r\n  }, [casesType, noOfDays]);\r\n\r\n  return (\r\n    <div className={props.className}>\r\n      {data?.length > 0 && (\r\n        <Line\r\n          data={{\r\n            datasets: [\r\n              {\r\n                backgroundColor: `${props.lineCh_bgColor}`,\r\n                borderColor: `${props.lineCh_brColor}`,\r\n                data: data,\r\n              },\r\n            ],\r\n          }}\r\n          options={options}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default LineGraph;\r\n"]},"metadata":{},"sourceType":"module"}