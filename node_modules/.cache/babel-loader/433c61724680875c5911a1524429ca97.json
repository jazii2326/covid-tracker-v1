{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\jazii\\\\Desktop\\\\covid\\\\covid-tracker\\\\src\\\\components\\\\CalenderCharts\\\\TodayCalenderContainer.jsx\";\nimport React, { useState, useEffect } from \"react\";\nimport { MenuItem, FormControl, Select } from \"@material-ui/core\";\nimport TodayCasesCalendar from \"./TodayCasesGraph\";\nimport TodayDeathsCalendar from \"./TodayDeathsGraph\";\nimport TodayRecoveredCalendar from \"./TodayRecoveredGraph\";\nimport \"./calender.css\";\nimport { findMax, convertDate, buildChartData } from \"./utils\";\n\nconst TodayCalenderContainer = () => {\n  const [country, setInputCountry] = useState(\"USA\");\n  const [countries, setCountries] = useState([]);\n  const [todayCases, setTodayCases] = useState([]);\n  const [todayDeaths, setTodayDeaths] = useState([]);\n  const [todayRecovered, setTodayRecovered] = useState([]);\n  const [maxCases, setMaxCases] = useState();\n  const [maxDeaths, setMaxDeaths] = useState();\n  const [maxRecovered, setMaxRecovered] = useState();\n  useEffect(() => {\n    const getCountryData = async () => {\n      fetch(\"https://disease.sh/v3/covid-19/historical/USA?lastdays=400\").then(response => response.json()).then(data => {\n        const dataForToday = data.timeline; //console.log(\"raw data for cases, deaths, recov\", dataForToday); //Work from here\n\n        const todayCasesCalenderData = buildChartData(dataForToday, \"cases\"); //console.log(\"cases values for each day\", todayCasesCalenderData);\n\n        const formatedTodayCases = todayCasesCalenderData.map(data => ({\n          day: convertDate(data.x),\n          value: data.y\n        }));\n        setTodayCases(formatedTodayCases);\n        const maxVal = findMax(formatedTodayCases);\n        setMaxCases(maxVal); //console.log(\"formatted data for calender\", formatedTodayCases);\n\n        const todayDeathsCalenderData = buildChartData(dataForToday, \"deaths\"); //console.log(\"deaths values for each day\", todayDeathsCalenderData);\n\n        const formatedTodayDeaths = todayDeathsCalenderData.map(data => ({\n          day: convertDate(data.x),\n          value: data.y\n        }));\n        setTodayDeaths(formatedTodayDeaths);\n        const maxValDeaths = findMax(formatedTodayDeaths);\n        setMaxDeaths(maxValDeaths);\n        const todayRecoveredCalenderData = buildChartData(dataForToday, \"recovered\"); //console.log(\"cases values for each day\", todayCasesCalenderData);\n\n        const formatedTodayRecovered = todayRecoveredCalenderData.map(data => ({\n          day: convertDate(data.x),\n          value: data.y\n        }));\n        setTodayRecovered(formatedTodayRecovered);\n        const maxValRecovered = findMax(formatedTodayRecovered);\n        setMaxRecovered(maxValRecovered);\n      });\n    };\n\n    getCountryData();\n  }, []);\n\n  const onCountryChange = async e => {\n    const countryCode = e.target.value;\n    fetch(`https://disease.sh/v3/covid-19/historical/${countryCode}?lastdays=400`).then(response => response.json()).then(data => {\n      if (data.message === \"Country not found or doesn't have any historical data\") {\n        alert(\"Doesn't have any historical data\");\n      } else {\n        const dataForToday = data.timeline; //console.log(\"raw data for cases, deaths, recov\", dataForToday); //Work from here\n\n        const todayCasesCalenderData = buildChartData(dataForToday, \"cases\"); //console.log(\"cases values for each day\", todayCasesCalenderData);\n\n        const formatedTodayCases = todayCasesCalenderData.map(data => ({\n          day: convertDate(data.x),\n          value: data.y\n        }));\n        setTodayCases(formatedTodayCases);\n        const maxVal = findMax(formatedTodayCases);\n        setMaxCases(maxVal); //console.log(\"formatted data for calender\", formatedTodayCases);\n\n        const todayDeathsCalenderData = buildChartData(dataForToday, \"deaths\"); //console.log(\"deaths values for each day\", todayDeathsCalenderData);\n\n        const formatedTodayDeaths = todayDeathsCalenderData.map(data => ({\n          day: convertDate(data.x),\n          value: data.y\n        }));\n        setTodayDeaths(formatedTodayDeaths);\n        const maxValDeaths = findMax(formatedTodayDeaths);\n        setMaxDeaths(maxValDeaths);\n        const todayRecoveredCalenderData = buildChartData(dataForToday, \"recovered\"); //console.log(\"cases values for each day\", todayCasesCalenderData);\n\n        const formatedTodayRecovered = todayRecoveredCalenderData.map(data => ({\n          day: convertDate(data.x),\n          value: data.y\n        }));\n        setTodayRecovered(formatedTodayRecovered);\n        const maxValRecovered = findMax(formatedTodayRecovered);\n        setMaxRecovered(maxValRecovered);\n        setInputCountry(countryCode); //console.log(country);\n      }\n    });\n  };\n\n  useEffect(() => {\n    const getCountriesData = async () => {\n      fetch(\"https://disease.sh/v3/covid-19/countries\").then(response => response.json()).then(data => {\n        const countries = data.map(country => ({\n          name: country.country,\n          value: country.countryInfo.iso2\n        }));\n        setCountries(countries);\n      });\n    };\n\n    getCountriesData();\n  }, []);\n  console.log(\"These are today cases\", todayCases, maxCases);\n  console.log(\"These are today deaths\", todayDeaths, maxDeaths);\n  console.log(\"These are today recovered\", todayRecovered, maxRecovered);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"calender__container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"calender-header\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    className: \"piechart_label\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 9\n    }\n  }, \"Select Country \"), /*#__PURE__*/React.createElement(FormControl, {\n    className: \"calender__dropdown\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Select, {\n    variant: \"outlined\",\n    value: country,\n    onChange: onCountryChange,\n    className: \"calender__select\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(MenuItem, {\n    value: \"USA\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 13\n    }\n  }, \"USA\"), countries.map(country => /*#__PURE__*/React.createElement(MenuItem, {\n    value: country.value,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 15\n    }\n  }, country.name))))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"calender__graphs\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 172,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      height: 250,\n      marginBottom: 20,\n      padding: 0\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 173,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h5\", {\n    className: \"calenderchart__title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 11\n    }\n  }, \"Today COVID Cases - Per Day Distribution\"), /*#__PURE__*/React.createElement(TodayCasesCalendar, {\n    data: todayCases,\n    maxCases: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 11\n    }\n  })), /*#__PURE__*/React.createElement(\"hr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 179,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      height: 250,\n      marginBottom: 20,\n      padding: 0\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 181,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h5\", {\n    className: \"calenderchart__title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 182,\n      columnNumber: 11\n    }\n  }, \"Today COVID Deaths - Per Day Distribution\"), /*#__PURE__*/React.createElement(TodayDeathsCalendar, {\n    data: todayDeaths,\n    maxDeaths: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 11\n    }\n  })), /*#__PURE__*/React.createElement(\"hr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 187,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      height: 250,\n      marginBottom: 20,\n      padding: 0\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 189,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h5\", {\n    className: \"calenderchart__title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 190,\n      columnNumber: 11\n    }\n  }, \"Today COVID Recovered - Per Day Distribution\"), /*#__PURE__*/React.createElement(TodayRecoveredCalendar, {\n    data: todayRecovered,\n    maxRecovered: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 193,\n      columnNumber: 11\n    }\n  }))));\n};\n\nexport default TodayCalenderContainer;","map":{"version":3,"sources":["C:/Users/jazii/Desktop/covid/covid-tracker/src/components/CalenderCharts/TodayCalenderContainer.jsx"],"names":["React","useState","useEffect","MenuItem","FormControl","Select","TodayCasesCalendar","TodayDeathsCalendar","TodayRecoveredCalendar","findMax","convertDate","buildChartData","TodayCalenderContainer","country","setInputCountry","countries","setCountries","todayCases","setTodayCases","todayDeaths","setTodayDeaths","todayRecovered","setTodayRecovered","maxCases","setMaxCases","maxDeaths","setMaxDeaths","maxRecovered","setMaxRecovered","getCountryData","fetch","then","response","json","data","dataForToday","timeline","todayCasesCalenderData","formatedTodayCases","map","day","x","value","y","maxVal","todayDeathsCalenderData","formatedTodayDeaths","maxValDeaths","todayRecoveredCalenderData","formatedTodayRecovered","maxValRecovered","onCountryChange","e","countryCode","target","message","alert","getCountriesData","name","countryInfo","iso2","console","log","height","marginBottom","padding"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,QAAT,EAAmBC,WAAnB,EAAgCC,MAAhC,QAA8C,mBAA9C;AACA,OAAOC,kBAAP,MAA+B,mBAA/B;AACA,OAAOC,mBAAP,MAAgC,oBAAhC;AACA,OAAOC,sBAAP,MAAmC,uBAAnC;AACA,OAAO,gBAAP;AAEA,SAASC,OAAT,EAAkBC,WAAlB,EAA+BC,cAA/B,QAAqD,SAArD;;AAEA,MAAMC,sBAAsB,GAAG,MAAM;AACnC,QAAM,CAACC,OAAD,EAAUC,eAAV,IAA6Bb,QAAQ,CAAC,KAAD,CAA3C;AACA,QAAM,CAACc,SAAD,EAAYC,YAAZ,IAA4Bf,QAAQ,CAAC,EAAD,CAA1C;AACA,QAAM,CAACgB,UAAD,EAAaC,aAAb,IAA8BjB,QAAQ,CAAC,EAAD,CAA5C;AACA,QAAM,CAACkB,WAAD,EAAcC,cAAd,IAAgCnB,QAAQ,CAAC,EAAD,CAA9C;AACA,QAAM,CAACoB,cAAD,EAAiBC,iBAAjB,IAAsCrB,QAAQ,CAAC,EAAD,CAApD;AACA,QAAM,CAACsB,QAAD,EAAWC,WAAX,IAA0BvB,QAAQ,EAAxC;AACA,QAAM,CAACwB,SAAD,EAAYC,YAAZ,IAA4BzB,QAAQ,EAA1C;AACA,QAAM,CAAC0B,YAAD,EAAeC,eAAf,IAAkC3B,QAAQ,EAAhD;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACd,UAAM2B,cAAc,GAAG,YAAY;AACjCC,MAAAA,KAAK,CAAC,4DAAD,CAAL,CACGC,IADH,CACSC,QAAD,IAAcA,QAAQ,CAACC,IAAT,EADtB,EAEGF,IAFH,CAESG,IAAD,IAAU;AACd,cAAMC,YAAY,GAAGD,IAAI,CAACE,QAA1B,CADc,CAEd;;AACA,cAAMC,sBAAsB,GAAG1B,cAAc,CAACwB,YAAD,EAAe,OAAf,CAA7C,CAHc,CAId;;AACA,cAAMG,kBAAkB,GAAGD,sBAAsB,CAACE,GAAvB,CAA4BL,IAAD,KAAW;AAC/DM,UAAAA,GAAG,EAAE9B,WAAW,CAACwB,IAAI,CAACO,CAAN,CAD+C;AAE/DC,UAAAA,KAAK,EAAER,IAAI,CAACS;AAFmD,SAAX,CAA3B,CAA3B;AAIAzB,QAAAA,aAAa,CAACoB,kBAAD,CAAb;AACA,cAAMM,MAAM,GAAGnC,OAAO,CAAC6B,kBAAD,CAAtB;AACAd,QAAAA,WAAW,CAACoB,MAAD,CAAX,CAXc,CAYd;;AAEA,cAAMC,uBAAuB,GAAGlC,cAAc,CAC5CwB,YAD4C,EAE5C,QAF4C,CAA9C,CAdc,CAkBd;;AACA,cAAMW,mBAAmB,GAAGD,uBAAuB,CAACN,GAAxB,CAA6BL,IAAD,KAAW;AACjEM,UAAAA,GAAG,EAAE9B,WAAW,CAACwB,IAAI,CAACO,CAAN,CADiD;AAEjEC,UAAAA,KAAK,EAAER,IAAI,CAACS;AAFqD,SAAX,CAA5B,CAA5B;AAIAvB,QAAAA,cAAc,CAAC0B,mBAAD,CAAd;AACA,cAAMC,YAAY,GAAGtC,OAAO,CAACqC,mBAAD,CAA5B;AACApB,QAAAA,YAAY,CAACqB,YAAD,CAAZ;AAEA,cAAMC,0BAA0B,GAAGrC,cAAc,CAC/CwB,YAD+C,EAE/C,WAF+C,CAAjD,CA3Bc,CA+Bd;;AACA,cAAMc,sBAAsB,GAAGD,0BAA0B,CAACT,GAA3B,CAC5BL,IAAD,KAAW;AACTM,UAAAA,GAAG,EAAE9B,WAAW,CAACwB,IAAI,CAACO,CAAN,CADP;AAETC,UAAAA,KAAK,EAAER,IAAI,CAACS;AAFH,SAAX,CAD6B,CAA/B;AAMArB,QAAAA,iBAAiB,CAAC2B,sBAAD,CAAjB;AACA,cAAMC,eAAe,GAAGzC,OAAO,CAACwC,sBAAD,CAA/B;AACArB,QAAAA,eAAe,CAACsB,eAAD,CAAf;AACD,OA3CH;AA4CD,KA7CD;;AA+CArB,IAAAA,cAAc;AACf,GAjDQ,EAiDN,EAjDM,CAAT;;AAmDA,QAAMsB,eAAe,GAAG,MAAOC,CAAP,IAAa;AACnC,UAAMC,WAAW,GAAGD,CAAC,CAACE,MAAF,CAASZ,KAA7B;AAEAZ,IAAAA,KAAK,CACF,6CAA4CuB,WAAY,eADtD,CAAL,CAGGtB,IAHH,CAGSC,QAAD,IAAcA,QAAQ,CAACC,IAAT,EAHtB,EAIGF,IAJH,CAISG,IAAD,IAAU;AACd,UACEA,IAAI,CAACqB,OAAL,KACA,uDAFF,EAGE;AACAC,QAAAA,KAAK,CAAC,kCAAD,CAAL;AACD,OALD,MAKO;AACL,cAAMrB,YAAY,GAAGD,IAAI,CAACE,QAA1B,CADK,CAEL;;AACA,cAAMC,sBAAsB,GAAG1B,cAAc,CAACwB,YAAD,EAAe,OAAf,CAA7C,CAHK,CAIL;;AACA,cAAMG,kBAAkB,GAAGD,sBAAsB,CAACE,GAAvB,CAA4BL,IAAD,KAAW;AAC/DM,UAAAA,GAAG,EAAE9B,WAAW,CAACwB,IAAI,CAACO,CAAN,CAD+C;AAE/DC,UAAAA,KAAK,EAAER,IAAI,CAACS;AAFmD,SAAX,CAA3B,CAA3B;AAIAzB,QAAAA,aAAa,CAACoB,kBAAD,CAAb;AACA,cAAMM,MAAM,GAAGnC,OAAO,CAAC6B,kBAAD,CAAtB;AACAd,QAAAA,WAAW,CAACoB,MAAD,CAAX,CAXK,CAYL;;AAEA,cAAMC,uBAAuB,GAAGlC,cAAc,CAC5CwB,YAD4C,EAE5C,QAF4C,CAA9C,CAdK,CAkBL;;AACA,cAAMW,mBAAmB,GAAGD,uBAAuB,CAACN,GAAxB,CAA6BL,IAAD,KAAW;AACjEM,UAAAA,GAAG,EAAE9B,WAAW,CAACwB,IAAI,CAACO,CAAN,CADiD;AAEjEC,UAAAA,KAAK,EAAER,IAAI,CAACS;AAFqD,SAAX,CAA5B,CAA5B;AAIAvB,QAAAA,cAAc,CAAC0B,mBAAD,CAAd;AACA,cAAMC,YAAY,GAAGtC,OAAO,CAACqC,mBAAD,CAA5B;AACApB,QAAAA,YAAY,CAACqB,YAAD,CAAZ;AAEA,cAAMC,0BAA0B,GAAGrC,cAAc,CAC/CwB,YAD+C,EAE/C,WAF+C,CAAjD,CA3BK,CA+BL;;AACA,cAAMc,sBAAsB,GAAGD,0BAA0B,CAACT,GAA3B,CAC5BL,IAAD,KAAW;AACTM,UAAAA,GAAG,EAAE9B,WAAW,CAACwB,IAAI,CAACO,CAAN,CADP;AAETC,UAAAA,KAAK,EAAER,IAAI,CAACS;AAFH,SAAX,CAD6B,CAA/B;AAMArB,QAAAA,iBAAiB,CAAC2B,sBAAD,CAAjB;AACA,cAAMC,eAAe,GAAGzC,OAAO,CAACwC,sBAAD,CAA/B;AACArB,QAAAA,eAAe,CAACsB,eAAD,CAAf;AAEApC,QAAAA,eAAe,CAACuC,WAAD,CAAf,CA1CK,CA2CL;AACD;AACF,KAvDH;AAwDD,GA3DD;;AA6DAnD,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMuD,gBAAgB,GAAG,YAAY;AACnC3B,MAAAA,KAAK,CAAC,0CAAD,CAAL,CACGC,IADH,CACSC,QAAD,IAAcA,QAAQ,CAACC,IAAT,EADtB,EAEGF,IAFH,CAESG,IAAD,IAAU;AACd,cAAMnB,SAAS,GAAGmB,IAAI,CAACK,GAAL,CAAU1B,OAAD,KAAc;AACvC6C,UAAAA,IAAI,EAAE7C,OAAO,CAACA,OADyB;AAEvC6B,UAAAA,KAAK,EAAE7B,OAAO,CAAC8C,WAAR,CAAoBC;AAFY,SAAd,CAAT,CAAlB;AAIA5C,QAAAA,YAAY,CAACD,SAAD,CAAZ;AACD,OARH;AASD,KAVD;;AAYA0C,IAAAA,gBAAgB;AACjB,GAdQ,EAcN,EAdM,CAAT;AAgBAI,EAAAA,OAAO,CAACC,GAAR,CAAY,uBAAZ,EAAqC7C,UAArC,EAAiDM,QAAjD;AAEAsC,EAAAA,OAAO,CAACC,GAAR,CAAY,wBAAZ,EAAsC3C,WAAtC,EAAmDM,SAAnD;AACAoC,EAAAA,OAAO,CAACC,GAAR,CAAY,2BAAZ,EAAyCzC,cAAzC,EAAyDM,YAAzD;AAEA,sBACE;AAAK,IAAA,SAAS,EAAC,qBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAK,IAAA,SAAS,EAAC,iBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAM,IAAA,SAAS,EAAC,gBAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBADF,eAEE,oBAAC,WAAD;AAAa,IAAA,SAAS,EAAC,oBAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,MAAD;AACE,IAAA,OAAO,EAAC,UADV;AAEE,IAAA,KAAK,EAAEd,OAFT;AAGE,IAAA,QAAQ,EAAEsC,eAHZ;AAIE,IAAA,SAAS,EAAC,kBAJZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAME,oBAAC,QAAD;AAAU,IAAA,KAAK,EAAC,KAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WANF,EAOGpC,SAAS,CAACwB,GAAV,CAAe1B,OAAD,iBACb,oBAAC,QAAD;AAAU,IAAA,KAAK,EAAEA,OAAO,CAAC6B,KAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAiC7B,OAAO,CAAC6C,IAAzC,CADD,CAPH,CADF,CAFF,CADF,eAkBE;AAAK,IAAA,SAAS,EAAC,kBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAK,IAAA,KAAK,EAAE;AAAEK,MAAAA,MAAM,EAAE,GAAV;AAAeC,MAAAA,YAAY,EAAE,EAA7B;AAAiCC,MAAAA,OAAO,EAAE;AAA1C,KAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAI,IAAA,SAAS,EAAC,sBAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gDADF,eAIE,oBAAC,kBAAD;AAAoB,IAAA,IAAI,EAAEhD,UAA1B;AAAsC,IAAA,QAAQ,MAA9C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAJF,CADF,eAOE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAPF,eASE;AAAK,IAAA,KAAK,EAAE;AAAE8C,MAAAA,MAAM,EAAE,GAAV;AAAeC,MAAAA,YAAY,EAAE,EAA7B;AAAiCC,MAAAA,OAAO,EAAE;AAA1C,KAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAI,IAAA,SAAS,EAAC,sBAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iDADF,eAIE,oBAAC,mBAAD;AAAqB,IAAA,IAAI,EAAE9C,WAA3B;AAAwC,IAAA,SAAS,MAAjD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAJF,CATF,eAeE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAfF,eAiBE;AAAK,IAAA,KAAK,EAAE;AAAE4C,MAAAA,MAAM,EAAE,GAAV;AAAeC,MAAAA,YAAY,EAAE,EAA7B;AAAiCC,MAAAA,OAAO,EAAE;AAA1C,KAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAI,IAAA,SAAS,EAAC,sBAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oDADF,eAIE,oBAAC,sBAAD;AAAwB,IAAA,IAAI,EAAE5C,cAA9B;AAA8C,IAAA,YAAY,MAA1D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAJF,CAjBF,CAlBF,CADF;AA6CD,CA5LD;;AA8LA,eAAeT,sBAAf","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { MenuItem, FormControl, Select } from \"@material-ui/core\";\r\nimport TodayCasesCalendar from \"./TodayCasesGraph\";\r\nimport TodayDeathsCalendar from \"./TodayDeathsGraph\";\r\nimport TodayRecoveredCalendar from \"./TodayRecoveredGraph\";\r\nimport \"./calender.css\";\r\n\r\nimport { findMax, convertDate, buildChartData } from \"./utils\";\r\n\r\nconst TodayCalenderContainer = () => {\r\n  const [country, setInputCountry] = useState(\"USA\");\r\n  const [countries, setCountries] = useState([]);\r\n  const [todayCases, setTodayCases] = useState([]);\r\n  const [todayDeaths, setTodayDeaths] = useState([]);\r\n  const [todayRecovered, setTodayRecovered] = useState([]);\r\n  const [maxCases, setMaxCases] = useState();\r\n  const [maxDeaths, setMaxDeaths] = useState();\r\n  const [maxRecovered, setMaxRecovered] = useState();\r\n\r\n  useEffect(() => {\r\n    const getCountryData = async () => {\r\n      fetch(\"https://disease.sh/v3/covid-19/historical/USA?lastdays=400\")\r\n        .then((response) => response.json())\r\n        .then((data) => {\r\n          const dataForToday = data.timeline;\r\n          //console.log(\"raw data for cases, deaths, recov\", dataForToday); //Work from here\r\n          const todayCasesCalenderData = buildChartData(dataForToday, \"cases\");\r\n          //console.log(\"cases values for each day\", todayCasesCalenderData);\r\n          const formatedTodayCases = todayCasesCalenderData.map((data) => ({\r\n            day: convertDate(data.x),\r\n            value: data.y,\r\n          }));\r\n          setTodayCases(formatedTodayCases);\r\n          const maxVal = findMax(formatedTodayCases);\r\n          setMaxCases(maxVal);\r\n          //console.log(\"formatted data for calender\", formatedTodayCases);\r\n\r\n          const todayDeathsCalenderData = buildChartData(\r\n            dataForToday,\r\n            \"deaths\"\r\n          );\r\n          //console.log(\"deaths values for each day\", todayDeathsCalenderData);\r\n          const formatedTodayDeaths = todayDeathsCalenderData.map((data) => ({\r\n            day: convertDate(data.x),\r\n            value: data.y,\r\n          }));\r\n          setTodayDeaths(formatedTodayDeaths);\r\n          const maxValDeaths = findMax(formatedTodayDeaths);\r\n          setMaxDeaths(maxValDeaths);\r\n\r\n          const todayRecoveredCalenderData = buildChartData(\r\n            dataForToday,\r\n            \"recovered\"\r\n          );\r\n          //console.log(\"cases values for each day\", todayCasesCalenderData);\r\n          const formatedTodayRecovered = todayRecoveredCalenderData.map(\r\n            (data) => ({\r\n              day: convertDate(data.x),\r\n              value: data.y,\r\n            })\r\n          );\r\n          setTodayRecovered(formatedTodayRecovered);\r\n          const maxValRecovered = findMax(formatedTodayRecovered);\r\n          setMaxRecovered(maxValRecovered);\r\n        });\r\n    };\r\n\r\n    getCountryData();\r\n  }, []);\r\n\r\n  const onCountryChange = async (e) => {\r\n    const countryCode = e.target.value;\r\n\r\n    fetch(\r\n      `https://disease.sh/v3/covid-19/historical/${countryCode}?lastdays=400`\r\n    )\r\n      .then((response) => response.json())\r\n      .then((data) => {\r\n        if (\r\n          data.message ===\r\n          \"Country not found or doesn't have any historical data\"\r\n        ) {\r\n          alert(\"Doesn't have any historical data\");\r\n        } else {\r\n          const dataForToday = data.timeline;\r\n          //console.log(\"raw data for cases, deaths, recov\", dataForToday); //Work from here\r\n          const todayCasesCalenderData = buildChartData(dataForToday, \"cases\");\r\n          //console.log(\"cases values for each day\", todayCasesCalenderData);\r\n          const formatedTodayCases = todayCasesCalenderData.map((data) => ({\r\n            day: convertDate(data.x),\r\n            value: data.y,\r\n          }));\r\n          setTodayCases(formatedTodayCases);\r\n          const maxVal = findMax(formatedTodayCases);\r\n          setMaxCases(maxVal);\r\n          //console.log(\"formatted data for calender\", formatedTodayCases);\r\n\r\n          const todayDeathsCalenderData = buildChartData(\r\n            dataForToday,\r\n            \"deaths\"\r\n          );\r\n          //console.log(\"deaths values for each day\", todayDeathsCalenderData);\r\n          const formatedTodayDeaths = todayDeathsCalenderData.map((data) => ({\r\n            day: convertDate(data.x),\r\n            value: data.y,\r\n          }));\r\n          setTodayDeaths(formatedTodayDeaths);\r\n          const maxValDeaths = findMax(formatedTodayDeaths);\r\n          setMaxDeaths(maxValDeaths);\r\n\r\n          const todayRecoveredCalenderData = buildChartData(\r\n            dataForToday,\r\n            \"recovered\"\r\n          );\r\n          //console.log(\"cases values for each day\", todayCasesCalenderData);\r\n          const formatedTodayRecovered = todayRecoveredCalenderData.map(\r\n            (data) => ({\r\n              day: convertDate(data.x),\r\n              value: data.y,\r\n            })\r\n          );\r\n          setTodayRecovered(formatedTodayRecovered);\r\n          const maxValRecovered = findMax(formatedTodayRecovered);\r\n          setMaxRecovered(maxValRecovered);\r\n\r\n          setInputCountry(countryCode);\r\n          //console.log(country);\r\n        }\r\n      });\r\n  };\r\n\r\n  useEffect(() => {\r\n    const getCountriesData = async () => {\r\n      fetch(\"https://disease.sh/v3/covid-19/countries\")\r\n        .then((response) => response.json())\r\n        .then((data) => {\r\n          const countries = data.map((country) => ({\r\n            name: country.country,\r\n            value: country.countryInfo.iso2,\r\n          }));\r\n          setCountries(countries);\r\n        });\r\n    };\r\n\r\n    getCountriesData();\r\n  }, []);\r\n\r\n  console.log(\"These are today cases\", todayCases, maxCases);\r\n\r\n  console.log(\"These are today deaths\", todayDeaths, maxDeaths);\r\n  console.log(\"These are today recovered\", todayRecovered, maxRecovered);\r\n\r\n  return (\r\n    <div className=\"calender__container\">\r\n      <div className=\"calender-header\">\r\n        <span className=\"piechart_label\">Select Country </span>\r\n        <FormControl className=\"calender__dropdown\">\r\n          <Select\r\n            variant=\"outlined\"\r\n            value={country}\r\n            onChange={onCountryChange}\r\n            className=\"calender__select\"\r\n          >\r\n            <MenuItem value=\"USA\">USA</MenuItem>\r\n            {countries.map((country) => (\r\n              <MenuItem value={country.value}>{country.name}</MenuItem>\r\n            ))}\r\n          </Select>\r\n        </FormControl>\r\n      </div>\r\n\r\n      <div className=\"calender__graphs\">\r\n        <div style={{ height: 250, marginBottom: 20, padding: 0 }}>\r\n          <h5 className=\"calenderchart__title\">\r\n            Today COVID Cases - Per Day Distribution\r\n          </h5>\r\n          <TodayCasesCalendar data={todayCases} maxCases />\r\n        </div>\r\n        <hr />\r\n\r\n        <div style={{ height: 250, marginBottom: 20, padding: 0 }}>\r\n          <h5 className=\"calenderchart__title\">\r\n            Today COVID Deaths - Per Day Distribution\r\n          </h5>\r\n          <TodayDeathsCalendar data={todayDeaths} maxDeaths />\r\n        </div>\r\n        <hr />\r\n\r\n        <div style={{ height: 250, marginBottom: 20, padding: 0 }}>\r\n          <h5 className=\"calenderchart__title\">\r\n            Today COVID Recovered - Per Day Distribution\r\n          </h5>\r\n          <TodayRecoveredCalendar data={todayRecovered} maxRecovered />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TodayCalenderContainer;\r\n"]},"metadata":{},"sourceType":"module"}