{"ast":null,"code":"import _regeneratorRuntime from\"C:\\\\Users\\\\jazii\\\\Desktop\\\\covid\\\\covid-tracker\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";import _asyncToGenerator from\"C:\\\\Users\\\\jazii\\\\Desktop\\\\covid\\\\covid-tracker\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";import _slicedToArray from\"C:\\\\Users\\\\jazii\\\\Desktop\\\\covid\\\\covid-tracker\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";import React,{useEffect,useState}from\"react\";import MyResponsiveChoropleth from\"./NivoMap\";import{MenuItem,FormControl,Select,Card,CardContent}from\"@material-ui/core\";import\"./nivomap.css\";var NivoMapContainer=function NivoMapContainer(){var _useState=useState([]),_useState2=_slicedToArray(_useState,2),countries=_useState2[0],setCountries=_useState2[1];var _useState3=useState(\"cases\"),_useState4=_slicedToArray(_useState3,2),casesType=_useState4[0],setCasesType=_useState4[1];var _useState5=useState(5000000),_useState6=_slicedToArray(_useState5,2),domainValue=_useState6[0],setDomainValue=_useState6[1];var _useState7=useState(\"YlOrRd\"),_useState8=_slicedToArray(_useState7,2),colorScheme=_useState8[0],setColorScheme=_useState8[1];useEffect(function(){var getCountriesData=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:fetch(\"https://disease.sh/v3/covid-19/countries\").then(function(response){return response.json();}).then(function(data){if(casesType===\"cases\"){var count=data.map(function(country){return{id:country.countryInfo.iso3,value:country.cases};});setCountries(count);setDomainValue(200000);setColorScheme(\"YlOrRd\");}if(casesType===\"deaths\"){var _count=data.map(function(country){return{id:country.countryInfo.iso3,value:country.deaths};});setCountries(_count);setDomainValue(20000);setColorScheme(\"YlOrRd\");}if(casesType===\"recovered\"){var _count2=data.map(function(country){return{id:country.countryInfo.iso3,value:country.recovered};});setCountries(_count2);setDomainValue(100000);setColorScheme(\"greens\");}console.log(casesType);});case 1:case\"end\":return _context.stop();}}},_callee);}));return function getCountriesData(){return _ref.apply(this,arguments);};}();getCountriesData();},[casesType]);console.log(countries);var onCaseTypeChange=/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(e){return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:setCasesType(e.target.value);case 1:case\"end\":return _context2.stop();}}},_callee2);}));return function onCaseTypeChange(_x){return _ref2.apply(this,arguments);};}();return/*#__PURE__*/React.createElement(\"div\",{className:\"nivomap__container\"},/*#__PURE__*/React.createElement(Card,null,/*#__PURE__*/React.createElement(CardContent,null,/*#__PURE__*/React.createElement(\"div\",{className:\"nivomap__header\"},/*#__PURE__*/React.createElement(\"span\",{className:\"nivomap__title\"},\"Select Type: \"),/*#__PURE__*/React.createElement(FormControl,{className:\"nivomap__dropdown\"},/*#__PURE__*/React.createElement(Select,{variant:\"outlined\",value:casesType,onChange:onCaseTypeChange,className:\"nivomap__select\"},/*#__PURE__*/React.createElement(MenuItem,{value:\"cases\"},\"Cases\"),/*#__PURE__*/React.createElement(MenuItem,{value:\"deaths\"},\"Deaths\"),/*#__PURE__*/React.createElement(MenuItem,{value:\"recovered\"},\"Recovered\")))),/*#__PURE__*/React.createElement(\"div\",{style:{height:400}},/*#__PURE__*/React.createElement(MyResponsiveChoropleth,{data:countries,domainValue:domainValue,colorScheme:colorScheme})))));};export default NivoMapContainer;","map":{"version":3,"sources":["C:/Users/jazii/Desktop/covid/covid-tracker/src/components/NivoMap/NivoMapContainer.jsx"],"names":["React","useEffect","useState","MyResponsiveChoropleth","MenuItem","FormControl","Select","Card","CardContent","NivoMapContainer","countries","setCountries","casesType","setCasesType","domainValue","setDomainValue","colorScheme","setColorScheme","getCountriesData","fetch","then","response","json","data","count","map","country","id","countryInfo","iso3","value","cases","deaths","recovered","console","log","onCaseTypeChange","e","target","height"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport MyResponsiveChoropleth from \"./NivoMap\";\r\nimport {\r\n  MenuItem,\r\n  FormControl,\r\n  Select,\r\n  Card,\r\n  CardContent,\r\n} from \"@material-ui/core\";\r\nimport \"./nivomap.css\";\r\n\r\nconst NivoMapContainer = () => {\r\n  const [countries, setCountries] = useState([]);\r\n  const [casesType, setCasesType] = useState(\"cases\");\r\n  const [domainValue, setDomainValue] = useState(5000000);\r\n  const [colorScheme, setColorScheme] = useState(\"YlOrRd\");\r\n\r\n  useEffect(() => {\r\n    const getCountriesData = async () => {\r\n      fetch(\"https://disease.sh/v3/covid-19/countries\")\r\n        .then((response) => response.json())\r\n        .then((data) => {\r\n          if (casesType === \"cases\") {\r\n            const count = data.map((country) => ({\r\n              id: country.countryInfo.iso3,\r\n              value: country.cases,\r\n            }));\r\n            setCountries(count);\r\n            setDomainValue(200000);\r\n            setColorScheme(\"YlOrRd\");\r\n          }\r\n          if (casesType === \"deaths\") {\r\n            const count = data.map((country) => ({\r\n              id: country.countryInfo.iso3,\r\n              value: country.deaths,\r\n            }));\r\n            setCountries(count);\r\n            setDomainValue(20000);\r\n            setColorScheme(\"YlOrRd\");\r\n          }\r\n          if (casesType === \"recovered\") {\r\n            const count = data.map((country) => ({\r\n              id: country.countryInfo.iso3,\r\n              value: country.recovered,\r\n            }));\r\n            setCountries(count);\r\n            setDomainValue(100000);\r\n            setColorScheme(\"greens\");\r\n          }\r\n\r\n          console.log(casesType);\r\n        });\r\n    };\r\n\r\n    getCountriesData();\r\n  }, [casesType]);\r\n\r\n  console.log(countries);\r\n\r\n  const onCaseTypeChange = async (e) => {\r\n    setCasesType(e.target.value);\r\n  };\r\n\r\n  return (\r\n    <div className=\"nivomap__container\">\r\n      <Card>\r\n        <CardContent>\r\n          <div className=\"nivomap__header\">\r\n            <span className=\"nivomap__title\">Select Type: </span>\r\n            <FormControl className=\"nivomap__dropdown\">\r\n              <Select\r\n                variant=\"outlined\"\r\n                value={casesType}\r\n                onChange={onCaseTypeChange}\r\n                className=\"nivomap__select\"\r\n              >\r\n                <MenuItem value=\"cases\">Cases</MenuItem>\r\n                <MenuItem value=\"deaths\">Deaths</MenuItem>\r\n                <MenuItem value=\"recovered\">Recovered</MenuItem>\r\n              </Select>\r\n            </FormControl>\r\n          </div>\r\n\r\n          <div style={{ height: 400 }}>\r\n            <MyResponsiveChoropleth\r\n              data={countries}\r\n              domainValue={domainValue}\r\n              colorScheme={colorScheme}\r\n            />\r\n          </div>\r\n        </CardContent>\r\n      </Card>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default NivoMapContainer;\r\n"]},"metadata":{},"sourceType":"module"}