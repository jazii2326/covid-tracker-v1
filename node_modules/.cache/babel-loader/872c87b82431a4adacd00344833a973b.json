{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\jazii\\\\Desktop\\\\covid\\\\covid-tracker\\\\src\\\\components\\\\CalenderCharts\\\\CalenderTotalContainer.jsx\";\nimport React, { useState, useEffect } from \"react\";\nimport { MenuItem, FormControl, Select } from \"@material-ui/core\";\nimport \"./calender.css\";\nimport MyResponsiveCalendar from \"./CalenderTotalCases\";\nimport CalenderCountryDeaths from \"./CalenderTotalDeaths\";\nimport CalendarCountryRecovered from \"./CalenderTotalRecovered\";\nimport { findMax, convertDate } from \"./utils\";\n\nconst CalenderCountriesContainer = () => {\n  const [country, setInputCountry] = useState(\"USA\");\n  const [countries, setCountries] = useState([]);\n  const [countryData, setCountryData] = useState([]);\n  const [countryDeaths, setCountryDeaths] = useState([]);\n  const [countryRecovered, setCountryRecovered] = useState([]);\n  useEffect(() => {\n    const getCountryData = async () => {\n      fetch(\"https://disease.sh/v3/covid-19/historical/USA?lastdays=400\").then(response => response.json()).then(data => {\n        const cases = data.timeline.cases;\n        const dataArr = Object.keys(cases).map(key => ({\n          day: convertDate(key),\n          value: cases[key]\n        }));\n        setCountryData(dataArr);\n        const deaths = data.timeline.deaths;\n        const dataArrDeaths = Object.keys(deaths).map(key => ({\n          day: convertDate(key),\n          value: deaths[key]\n        }));\n        setCountryDeaths(dataArrDeaths);\n        const recovered = data.timeline.recovered;\n        const dataArrRecovered = Object.keys(recovered).map(key => ({\n          day: convertDate(key),\n          value: recovered[key]\n        }));\n        setCountryRecovered(dataArrRecovered);\n      });\n    };\n\n    getCountryData();\n  }, []);\n\n  const onCountryChange = async e => {\n    const countryCode = e.target.value;\n    fetch(`https://disease.sh/v3/covid-19/historical/${countryCode}?lastdays=400`).then(response => response.json()).then(data => {\n      if (data.message === \"Country not found or doesn't have any historical data\") {\n        alert(\"Doesn't have any historical data\");\n      } else {\n        const cases = data.timeline.cases;\n        const dataArr = Object.keys(cases).map(key => ({\n          day: convertDate(key),\n          value: cases[key]\n        }));\n        setInputCountry(countryCode);\n        setCountryData(dataArr);\n        console.log(countryCode, country, countryData);\n        const maxValCases = findMax(dataArr);\n        console.log(maxValCases);\n        const deaths = data.timeline.deaths;\n        const dataArrDeaths = Object.keys(deaths).map(key => ({\n          day: convertDate(key),\n          value: deaths[key]\n        }));\n        setCountryDeaths(dataArrDeaths);\n        const maxValDeaths = findMax(dataArrDeaths);\n        console.log(maxValDeaths);\n        const recovered = data.timeline.recovered;\n        const dataArrRecovered = Object.keys(recovered).map(key => ({\n          day: convertDate(key),\n          value: recovered[key]\n        }));\n        setCountryRecovered(dataArrRecovered);\n        const maxValRecovered = findMax(dataArrRecovered);\n        console.log(maxValRecovered);\n      }\n    });\n  };\n\n  useEffect(() => {\n    const getCountriesData = async () => {\n      fetch(\"https://disease.sh/v3/covid-19/countries\").then(response => response.json()).then(data => {\n        const countries = data.map(country => ({\n          name: country.country,\n          value: country.countryInfo.iso2\n        }));\n        setCountries(countries);\n      });\n    };\n\n    getCountriesData();\n  }, []);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"calender__container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"calender__header\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    className: \"piechart_label\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 9\n    }\n  }, \"Select Country \"), /*#__PURE__*/React.createElement(FormControl, {\n    className: \"calender__dropdown\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Select, {\n    variant: \"outlined\",\n    value: country,\n    onChange: onCountryChange,\n    className: \"calender__select\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(MenuItem, {\n    value: \"USA\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 13\n    }\n  }, \"USA\"), countries.map(country => /*#__PURE__*/React.createElement(MenuItem, {\n    value: country.value,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 15\n    }\n  }, country.name))))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"calender__graphs\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      height: 250,\n      marginBottom: 60\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h5\", {\n    className: \"calenderchart__title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 11\n    }\n  }, \"Total COVID Cases - Per Day Distribution\"), /*#__PURE__*/React.createElement(MyResponsiveCalendar, {\n    data: countryData,\n    maxValCases: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 11\n    }\n  })), /*#__PURE__*/React.createElement(\"hr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      height: 250,\n      marginBottom: 60\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h5\", {\n    className: \"calenderchart__title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 11\n    }\n  }, \"Total COVID Deaths - Per Day Distribution\"), /*#__PURE__*/React.createElement(CalenderCountryDeaths, {\n    data: countryDeaths,\n    maxValDeaths: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 11\n    }\n  })), /*#__PURE__*/React.createElement(\"hr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      height: 250,\n      marginBottom: 60\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h5\", {\n    className: \"calenderchart__title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 11\n    }\n  }, \"Total COVID Recovered - Per Day Distribution\"), /*#__PURE__*/React.createElement(CalendarCountryRecovered, {\n    data: countryRecovered,\n    maxValRecovered: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 11\n    }\n  }))));\n};\n\nexport default CalenderCountriesContainer;","map":{"version":3,"sources":["C:/Users/jazii/Desktop/covid/covid-tracker/src/components/CalenderCharts/CalenderTotalContainer.jsx"],"names":["React","useState","useEffect","MenuItem","FormControl","Select","MyResponsiveCalendar","CalenderCountryDeaths","CalendarCountryRecovered","findMax","convertDate","CalenderCountriesContainer","country","setInputCountry","countries","setCountries","countryData","setCountryData","countryDeaths","setCountryDeaths","countryRecovered","setCountryRecovered","getCountryData","fetch","then","response","json","data","cases","timeline","dataArr","Object","keys","map","key","day","value","deaths","dataArrDeaths","recovered","dataArrRecovered","onCountryChange","e","countryCode","target","message","alert","console","log","maxValCases","maxValDeaths","maxValRecovered","getCountriesData","name","countryInfo","iso2","height","marginBottom"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { MenuItem, FormControl, Select } from \"@material-ui/core\";\r\nimport \"./calender.css\";\r\n\r\nimport MyResponsiveCalendar from \"./CalenderTotalCases\";\r\nimport CalenderCountryDeaths from \"./CalenderTotalDeaths\";\r\nimport CalendarCountryRecovered from \"./CalenderTotalRecovered\";\r\n\r\nimport { findMax, convertDate } from \"./utils\";\r\n\r\nconst CalenderCountriesContainer = () => {\r\n  const [country, setInputCountry] = useState(\"USA\");\r\n  const [countries, setCountries] = useState([]);\r\n  const [countryData, setCountryData] = useState([]);\r\n  const [countryDeaths, setCountryDeaths] = useState([]);\r\n  const [countryRecovered, setCountryRecovered] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const getCountryData = async () => {\r\n      fetch(\"https://disease.sh/v3/covid-19/historical/USA?lastdays=400\")\r\n        .then((response) => response.json())\r\n        .then((data) => {\r\n          const cases = data.timeline.cases;\r\n          const dataArr = Object.keys(cases).map((key) => ({\r\n            day: convertDate(key),\r\n            value: cases[key],\r\n          }));\r\n          setCountryData(dataArr);\r\n\r\n          const deaths = data.timeline.deaths;\r\n          const dataArrDeaths = Object.keys(deaths).map((key) => ({\r\n            day: convertDate(key),\r\n            value: deaths[key],\r\n          }));\r\n\r\n          setCountryDeaths(dataArrDeaths);\r\n\r\n          const recovered = data.timeline.recovered;\r\n          const dataArrRecovered = Object.keys(recovered).map((key) => ({\r\n            day: convertDate(key),\r\n            value: recovered[key],\r\n          }));\r\n\r\n          setCountryRecovered(dataArrRecovered);\r\n        });\r\n    };\r\n\r\n    getCountryData();\r\n  }, []);\r\n\r\n  const onCountryChange = async (e) => {\r\n    const countryCode = e.target.value;\r\n\r\n    fetch(\r\n      `https://disease.sh/v3/covid-19/historical/${countryCode}?lastdays=400`\r\n    )\r\n      .then((response) => response.json())\r\n      .then((data) => {\r\n        if (\r\n          data.message ===\r\n          \"Country not found or doesn't have any historical data\"\r\n        ) {\r\n          alert(\"Doesn't have any historical data\");\r\n        } else {\r\n          const cases = data.timeline.cases;\r\n          const dataArr = Object.keys(cases).map((key) => ({\r\n            day: convertDate(key),\r\n            value: cases[key],\r\n          }));\r\n          setInputCountry(countryCode);\r\n          setCountryData(dataArr);\r\n          console.log(countryCode, country, countryData);\r\n\r\n          const maxValCases = findMax(dataArr);\r\n          console.log(maxValCases);\r\n\r\n          const deaths = data.timeline.deaths;\r\n          const dataArrDeaths = Object.keys(deaths).map((key) => ({\r\n            day: convertDate(key),\r\n            value: deaths[key],\r\n          }));\r\n\r\n          setCountryDeaths(dataArrDeaths);\r\n\r\n          const maxValDeaths = findMax(dataArrDeaths);\r\n          console.log(maxValDeaths);\r\n\r\n          const recovered = data.timeline.recovered;\r\n          const dataArrRecovered = Object.keys(recovered).map((key) => ({\r\n            day: convertDate(key),\r\n            value: recovered[key],\r\n          }));\r\n\r\n          setCountryRecovered(dataArrRecovered);\r\n          const maxValRecovered = findMax(dataArrRecovered);\r\n          console.log(maxValRecovered);\r\n        }\r\n      });\r\n  };\r\n\r\n  useEffect(() => {\r\n    const getCountriesData = async () => {\r\n      fetch(\"https://disease.sh/v3/covid-19/countries\")\r\n        .then((response) => response.json())\r\n        .then((data) => {\r\n          const countries = data.map((country) => ({\r\n            name: country.country,\r\n            value: country.countryInfo.iso2,\r\n          }));\r\n          setCountries(countries);\r\n        });\r\n    };\r\n\r\n    getCountriesData();\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"calender__container\">\r\n      <div className=\"calender__header\">\r\n        <span className=\"piechart_label\">Select Country </span>\r\n        <FormControl className=\"calender__dropdown\">\r\n          <Select\r\n            variant=\"outlined\"\r\n            value={country}\r\n            onChange={onCountryChange}\r\n            className=\"calender__select\"\r\n          >\r\n            <MenuItem value=\"USA\">USA</MenuItem>\r\n            {countries.map((country) => (\r\n              <MenuItem value={country.value}>{country.name}</MenuItem>\r\n            ))}\r\n          </Select>\r\n        </FormControl>\r\n      </div>\r\n      <div className=\"calender__graphs\">\r\n        <div style={{ height: 250, marginBottom: 60 }}>\r\n          <h5 className=\"calenderchart__title\">\r\n            Total COVID Cases - Per Day Distribution\r\n          </h5>\r\n          <MyResponsiveCalendar data={countryData} maxValCases />\r\n        </div>\r\n        <hr />\r\n\r\n        <div style={{ height: 250, marginBottom: 60 }}>\r\n          <h5 className=\"calenderchart__title\">\r\n            Total COVID Deaths - Per Day Distribution\r\n          </h5>\r\n          <CalenderCountryDeaths data={countryDeaths} maxValDeaths />\r\n        </div>\r\n        <hr />\r\n\r\n        <div style={{ height: 250, marginBottom: 60 }}>\r\n          <h5 className=\"calenderchart__title\">\r\n            Total COVID Recovered - Per Day Distribution\r\n          </h5>\r\n          <CalendarCountryRecovered data={countryRecovered} maxValRecovered />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CalenderCountriesContainer;\r\n"]},"metadata":{},"sourceType":"module"}