{"ast":null,"code":"import _regeneratorRuntime from\"C:\\\\Users\\\\jazii\\\\Desktop\\\\covid\\\\covid-tracker\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";import _asyncToGenerator from\"C:\\\\Users\\\\jazii\\\\Desktop\\\\covid\\\\covid-tracker\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";import _slicedToArray from\"C:\\\\Users\\\\jazii\\\\Desktop\\\\covid\\\\covid-tracker\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";import React,{useState,useEffect}from\"react\";import{MenuItem,FormControl,Select}from\"@material-ui/core\";import TodayCasesCalendar from\"./TodayCasesGraph\";import TodayDeathsCalendar from\"./TodayDeathsGraph\";import TodayRecoveredCalendar from\"./TodayRecoveredGraph\";import\"./calender.css\";import{findMax,convertDate,buildChartData}from\"./utils\";var TodayCalenderContainer=function TodayCalenderContainer(){var _useState=useState(\"USA\"),_useState2=_slicedToArray(_useState,2),country=_useState2[0],setInputCountry=_useState2[1];var _useState3=useState([]),_useState4=_slicedToArray(_useState3,2),countries=_useState4[0],setCountries=_useState4[1];var _useState5=useState([]),_useState6=_slicedToArray(_useState5,2),todayCases=_useState6[0],setTodayCases=_useState6[1];var _useState7=useState([]),_useState8=_slicedToArray(_useState7,2),todayDeaths=_useState8[0],setTodayDeaths=_useState8[1];var _useState9=useState([]),_useState10=_slicedToArray(_useState9,2),todayRecovered=_useState10[0],setTodayRecovered=_useState10[1];var _useState11=useState(),_useState12=_slicedToArray(_useState11,2),maxCases=_useState12[0],setMaxCases=_useState12[1];var _useState13=useState(),_useState14=_slicedToArray(_useState13,2),maxDeaths=_useState14[0],setMaxDeaths=_useState14[1];var _useState15=useState(),_useState16=_slicedToArray(_useState15,2),maxRecovered=_useState16[0],setMaxRecovered=_useState16[1];useEffect(function(){var getCountryData=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:fetch(\"https://disease.sh/v3/covid-19/historical/USA?lastdays=400\").then(function(response){return response.json();}).then(function(data){var dataForToday=data.timeline;//console.log(\"raw data for cases, deaths, recov\", dataForToday); //Work from here\nvar todayCasesCalenderData=buildChartData(dataForToday,\"cases\");//console.log(\"cases values for each day\", todayCasesCalenderData);\nvar formatedTodayCases=todayCasesCalenderData.map(function(data){return{day:convertDate(data.x),value:data.y};});setTodayCases(formatedTodayCases);var maxVal=findMax(formatedTodayCases);setMaxCases(maxVal);//console.log(\"formatted data for calender\", formatedTodayCases);\nvar todayDeathsCalenderData=buildChartData(dataForToday,\"deaths\");//console.log(\"deaths values for each day\", todayDeathsCalenderData);\nvar formatedTodayDeaths=todayDeathsCalenderData.map(function(data){return{day:convertDate(data.x),value:data.y};});setTodayDeaths(formatedTodayDeaths);var maxValDeaths=findMax(formatedTodayDeaths);setMaxDeaths(maxValDeaths);var todayRecoveredCalenderData=buildChartData(dataForToday,\"recovered\");//console.log(\"cases values for each day\", todayCasesCalenderData);\nvar formatedTodayRecovered=todayRecoveredCalenderData.map(function(data){return{day:convertDate(data.x),value:data.y};});setTodayRecovered(formatedTodayRecovered);var maxValRecovered=findMax(formatedTodayRecovered);setMaxRecovered(maxValRecovered);});case 1:case\"end\":return _context.stop();}}},_callee);}));return function getCountryData(){return _ref.apply(this,arguments);};}();getCountryData();},[]);var onCountryChange=/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(e){var countryCode;return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:countryCode=e.target.value;fetch(\"https://disease.sh/v3/covid-19/historical/\".concat(countryCode,\"?lastdays=400\")).then(function(response){return response.json();}).then(function(data){if(data.message===\"Country not found or doesn't have any historical data\"){alert(\"Doesn't have any historical data\");}else{var dataForToday=data.timeline;//console.log(\"raw data for cases, deaths, recov\", dataForToday); //Work from here\nvar todayCasesCalenderData=buildChartData(dataForToday,\"cases\");//console.log(\"cases values for each day\", todayCasesCalenderData);\nvar formatedTodayCases=todayCasesCalenderData.map(function(data){return{day:convertDate(data.x),value:data.y};});setTodayCases(formatedTodayCases);var maxVal=findMax(formatedTodayCases);setMaxCases(maxVal);//console.log(\"formatted data for calender\", formatedTodayCases);\nvar todayDeathsCalenderData=buildChartData(dataForToday,\"deaths\");//console.log(\"deaths values for each day\", todayDeathsCalenderData);\nvar formatedTodayDeaths=todayDeathsCalenderData.map(function(data){return{day:convertDate(data.x),value:data.y};});setTodayDeaths(formatedTodayDeaths);var maxValDeaths=findMax(formatedTodayDeaths);setMaxDeaths(maxValDeaths);var todayRecoveredCalenderData=buildChartData(dataForToday,\"recovered\");//console.log(\"cases values for each day\", todayCasesCalenderData);\nvar formatedTodayRecovered=todayRecoveredCalenderData.map(function(data){return{day:convertDate(data.x),value:data.y};});setTodayRecovered(formatedTodayRecovered);var maxValRecovered=findMax(formatedTodayRecovered);setMaxRecovered(maxValRecovered);setInputCountry(countryCode);//console.log(country);\n}});case 2:case\"end\":return _context2.stop();}}},_callee2);}));return function onCountryChange(_x){return _ref2.apply(this,arguments);};}();useEffect(function(){var getCountriesData=/*#__PURE__*/function(){var _ref3=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3(){return _regeneratorRuntime.wrap(function _callee3$(_context3){while(1){switch(_context3.prev=_context3.next){case 0:fetch(\"https://disease.sh/v3/covid-19/countries\").then(function(response){return response.json();}).then(function(data){var countries=data.map(function(country){return{name:country.country,value:country.countryInfo.iso2};});setCountries(countries);});case 1:case\"end\":return _context3.stop();}}},_callee3);}));return function getCountriesData(){return _ref3.apply(this,arguments);};}();getCountriesData();},[]);console.log(\"These are today cases\",todayCases,maxCases);console.log(\"These are today deaths\",todayDeaths,maxDeaths);console.log(\"These are today recovered\",todayRecovered,maxRecovered);return/*#__PURE__*/React.createElement(\"div\",{className:\"calender__container\"},/*#__PURE__*/React.createElement(\"div\",{className:\"calender-header\"},/*#__PURE__*/React.createElement(\"span\",{className:\"piechart_label\"},\"Select Country \"),/*#__PURE__*/React.createElement(FormControl,{className:\"calender__dropdown\"},/*#__PURE__*/React.createElement(Select,{variant:\"outlined\",value:country,onChange:onCountryChange,className:\"calender__select\"},/*#__PURE__*/React.createElement(MenuItem,{value:\"USA\"},\"USA\"),countries.map(function(country){return/*#__PURE__*/React.createElement(MenuItem,{value:country.value},country.name);})))),/*#__PURE__*/React.createElement(\"div\",{className:\"calender__graphs\"},/*#__PURE__*/React.createElement(\"div\",{style:{height:250,marginBottom:20,padding:0}},/*#__PURE__*/React.createElement(\"h5\",{className:\"calenderchart__title\"},\"Today COVID Cases - Per Day Distribution\"),/*#__PURE__*/React.createElement(TodayCasesCalendar,{data:todayCases,maxCases:true})),/*#__PURE__*/React.createElement(\"hr\",null),/*#__PURE__*/React.createElement(\"div\",{style:{height:250,marginBottom:20,padding:0}},/*#__PURE__*/React.createElement(\"h5\",{className:\"calenderchart__title\"},\"Today COVID Deaths - Per Day Distribution\"),/*#__PURE__*/React.createElement(TodayDeathsCalendar,{data:todayDeaths,maxDeaths:true})),/*#__PURE__*/React.createElement(\"hr\",null),/*#__PURE__*/React.createElement(\"div\",{style:{height:250,marginBottom:20,padding:0}},/*#__PURE__*/React.createElement(\"h5\",{className:\"calenderchart__title\"},\"Today COVID Recovered - Per Day Distribution\"),/*#__PURE__*/React.createElement(TodayRecoveredCalendar,{data:todayRecovered,maxRecovered:true}))));};export default TodayCalenderContainer;","map":{"version":3,"sources":["C:/Users/jazii/Desktop/covid/covid-tracker/src/components/CalenderCharts/TodayCalenderContainer.jsx"],"names":["React","useState","useEffect","MenuItem","FormControl","Select","TodayCasesCalendar","TodayDeathsCalendar","TodayRecoveredCalendar","findMax","convertDate","buildChartData","TodayCalenderContainer","country","setInputCountry","countries","setCountries","todayCases","setTodayCases","todayDeaths","setTodayDeaths","todayRecovered","setTodayRecovered","maxCases","setMaxCases","maxDeaths","setMaxDeaths","maxRecovered","setMaxRecovered","getCountryData","fetch","then","response","json","data","dataForToday","timeline","todayCasesCalenderData","formatedTodayCases","map","day","x","value","y","maxVal","todayDeathsCalenderData","formatedTodayDeaths","maxValDeaths","todayRecoveredCalenderData","formatedTodayRecovered","maxValRecovered","onCountryChange","e","countryCode","target","message","alert","getCountriesData","name","countryInfo","iso2","console","log","height","marginBottom","padding"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { MenuItem, FormControl, Select } from \"@material-ui/core\";\r\nimport TodayCasesCalendar from \"./TodayCasesGraph\";\r\nimport TodayDeathsCalendar from \"./TodayDeathsGraph\";\r\nimport TodayRecoveredCalendar from \"./TodayRecoveredGraph\";\r\nimport \"./calender.css\";\r\n\r\nimport { findMax, convertDate, buildChartData } from \"./utils\";\r\n\r\nconst TodayCalenderContainer = () => {\r\n  const [country, setInputCountry] = useState(\"USA\");\r\n  const [countries, setCountries] = useState([]);\r\n  const [todayCases, setTodayCases] = useState([]);\r\n  const [todayDeaths, setTodayDeaths] = useState([]);\r\n  const [todayRecovered, setTodayRecovered] = useState([]);\r\n  const [maxCases, setMaxCases] = useState();\r\n  const [maxDeaths, setMaxDeaths] = useState();\r\n  const [maxRecovered, setMaxRecovered] = useState();\r\n\r\n  useEffect(() => {\r\n    const getCountryData = async () => {\r\n      fetch(\"https://disease.sh/v3/covid-19/historical/USA?lastdays=400\")\r\n        .then((response) => response.json())\r\n        .then((data) => {\r\n          const dataForToday = data.timeline;\r\n          //console.log(\"raw data for cases, deaths, recov\", dataForToday); //Work from here\r\n          const todayCasesCalenderData = buildChartData(dataForToday, \"cases\");\r\n          //console.log(\"cases values for each day\", todayCasesCalenderData);\r\n          const formatedTodayCases = todayCasesCalenderData.map((data) => ({\r\n            day: convertDate(data.x),\r\n            value: data.y,\r\n          }));\r\n          setTodayCases(formatedTodayCases);\r\n          const maxVal = findMax(formatedTodayCases);\r\n          setMaxCases(maxVal);\r\n          //console.log(\"formatted data for calender\", formatedTodayCases);\r\n\r\n          const todayDeathsCalenderData = buildChartData(\r\n            dataForToday,\r\n            \"deaths\"\r\n          );\r\n          //console.log(\"deaths values for each day\", todayDeathsCalenderData);\r\n          const formatedTodayDeaths = todayDeathsCalenderData.map((data) => ({\r\n            day: convertDate(data.x),\r\n            value: data.y,\r\n          }));\r\n          setTodayDeaths(formatedTodayDeaths);\r\n          const maxValDeaths = findMax(formatedTodayDeaths);\r\n          setMaxDeaths(maxValDeaths);\r\n\r\n          const todayRecoveredCalenderData = buildChartData(\r\n            dataForToday,\r\n            \"recovered\"\r\n          );\r\n          //console.log(\"cases values for each day\", todayCasesCalenderData);\r\n          const formatedTodayRecovered = todayRecoveredCalenderData.map(\r\n            (data) => ({\r\n              day: convertDate(data.x),\r\n              value: data.y,\r\n            })\r\n          );\r\n          setTodayRecovered(formatedTodayRecovered);\r\n          const maxValRecovered = findMax(formatedTodayRecovered);\r\n          setMaxRecovered(maxValRecovered);\r\n        });\r\n    };\r\n\r\n    getCountryData();\r\n  }, []);\r\n\r\n  const onCountryChange = async (e) => {\r\n    const countryCode = e.target.value;\r\n\r\n    fetch(\r\n      `https://disease.sh/v3/covid-19/historical/${countryCode}?lastdays=400`\r\n    )\r\n      .then((response) => response.json())\r\n      .then((data) => {\r\n        if (\r\n          data.message ===\r\n          \"Country not found or doesn't have any historical data\"\r\n        ) {\r\n          alert(\"Doesn't have any historical data\");\r\n        } else {\r\n          const dataForToday = data.timeline;\r\n          //console.log(\"raw data for cases, deaths, recov\", dataForToday); //Work from here\r\n          const todayCasesCalenderData = buildChartData(dataForToday, \"cases\");\r\n          //console.log(\"cases values for each day\", todayCasesCalenderData);\r\n          const formatedTodayCases = todayCasesCalenderData.map((data) => ({\r\n            day: convertDate(data.x),\r\n            value: data.y,\r\n          }));\r\n          setTodayCases(formatedTodayCases);\r\n          const maxVal = findMax(formatedTodayCases);\r\n          setMaxCases(maxVal);\r\n          //console.log(\"formatted data for calender\", formatedTodayCases);\r\n\r\n          const todayDeathsCalenderData = buildChartData(\r\n            dataForToday,\r\n            \"deaths\"\r\n          );\r\n          //console.log(\"deaths values for each day\", todayDeathsCalenderData);\r\n          const formatedTodayDeaths = todayDeathsCalenderData.map((data) => ({\r\n            day: convertDate(data.x),\r\n            value: data.y,\r\n          }));\r\n          setTodayDeaths(formatedTodayDeaths);\r\n          const maxValDeaths = findMax(formatedTodayDeaths);\r\n          setMaxDeaths(maxValDeaths);\r\n\r\n          const todayRecoveredCalenderData = buildChartData(\r\n            dataForToday,\r\n            \"recovered\"\r\n          );\r\n          //console.log(\"cases values for each day\", todayCasesCalenderData);\r\n          const formatedTodayRecovered = todayRecoveredCalenderData.map(\r\n            (data) => ({\r\n              day: convertDate(data.x),\r\n              value: data.y,\r\n            })\r\n          );\r\n          setTodayRecovered(formatedTodayRecovered);\r\n          const maxValRecovered = findMax(formatedTodayRecovered);\r\n          setMaxRecovered(maxValRecovered);\r\n\r\n          setInputCountry(countryCode);\r\n          //console.log(country);\r\n        }\r\n      });\r\n  };\r\n\r\n  useEffect(() => {\r\n    const getCountriesData = async () => {\r\n      fetch(\"https://disease.sh/v3/covid-19/countries\")\r\n        .then((response) => response.json())\r\n        .then((data) => {\r\n          const countries = data.map((country) => ({\r\n            name: country.country,\r\n            value: country.countryInfo.iso2,\r\n          }));\r\n          setCountries(countries);\r\n        });\r\n    };\r\n\r\n    getCountriesData();\r\n  }, []);\r\n\r\n  console.log(\"These are today cases\", todayCases, maxCases);\r\n\r\n  console.log(\"These are today deaths\", todayDeaths, maxDeaths);\r\n  console.log(\"These are today recovered\", todayRecovered, maxRecovered);\r\n\r\n  return (\r\n    <div className=\"calender__container\">\r\n      <div className=\"calender-header\">\r\n        <span className=\"piechart_label\">Select Country </span>\r\n        <FormControl className=\"calender__dropdown\">\r\n          <Select\r\n            variant=\"outlined\"\r\n            value={country}\r\n            onChange={onCountryChange}\r\n            className=\"calender__select\"\r\n          >\r\n            <MenuItem value=\"USA\">USA</MenuItem>\r\n            {countries.map((country) => (\r\n              <MenuItem value={country.value}>{country.name}</MenuItem>\r\n            ))}\r\n          </Select>\r\n        </FormControl>\r\n      </div>\r\n\r\n      <div className=\"calender__graphs\">\r\n        <div style={{ height: 250, marginBottom: 20, padding: 0 }}>\r\n          <h5 className=\"calenderchart__title\">\r\n            Today COVID Cases - Per Day Distribution\r\n          </h5>\r\n          <TodayCasesCalendar data={todayCases} maxCases />\r\n        </div>\r\n        <hr />\r\n\r\n        <div style={{ height: 250, marginBottom: 20, padding: 0 }}>\r\n          <h5 className=\"calenderchart__title\">\r\n            Today COVID Deaths - Per Day Distribution\r\n          </h5>\r\n          <TodayDeathsCalendar data={todayDeaths} maxDeaths />\r\n        </div>\r\n        <hr />\r\n\r\n        <div style={{ height: 250, marginBottom: 20, padding: 0 }}>\r\n          <h5 className=\"calenderchart__title\">\r\n            Today COVID Recovered - Per Day Distribution\r\n          </h5>\r\n          <TodayRecoveredCalendar data={todayRecovered} maxRecovered />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TodayCalenderContainer;\r\n"]},"metadata":{},"sourceType":"module"}