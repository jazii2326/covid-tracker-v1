{"ast":null,"code":"import _regeneratorRuntime from\"C:\\\\Users\\\\jazii\\\\Desktop\\\\covid\\\\covid-tracker\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";import _asyncToGenerator from\"C:\\\\Users\\\\jazii\\\\Desktop\\\\covid\\\\covid-tracker\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";import _slicedToArray from\"C:\\\\Users\\\\jazii\\\\Desktop\\\\covid\\\\covid-tracker\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";import React,{useState,useEffect}from\"react\";import{MenuItem,FormControl,Select}from\"@material-ui/core\";import\"./calender.css\";import MyResponsiveCalendar from\"./CalenderTotalCases\";import CalenderCountryDeaths from\"./CalenderTotalDeaths\";import CalendarCountryRecovered from\"./CalenderTotalRecovered\";import{findMax,convertDate}from\"./utils\";var CalenderCountriesContainer=function CalenderCountriesContainer(){var _useState=useState(\"USA\"),_useState2=_slicedToArray(_useState,2),country=_useState2[0],setInputCountry=_useState2[1];var _useState3=useState([]),_useState4=_slicedToArray(_useState3,2),countries=_useState4[0],setCountries=_useState4[1];var _useState5=useState([]),_useState6=_slicedToArray(_useState5,2),countryData=_useState6[0],setCountryData=_useState6[1];var _useState7=useState([]),_useState8=_slicedToArray(_useState7,2),countryDeaths=_useState8[0],setCountryDeaths=_useState8[1];var _useState9=useState([]),_useState10=_slicedToArray(_useState9,2),countryRecovered=_useState10[0],setCountryRecovered=_useState10[1];useEffect(function(){var getCountryData=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:fetch(\"https://disease.sh/v3/covid-19/historical/USA?lastdays=400\").then(function(response){return response.json();}).then(function(data){var cases=data.timeline.cases;var dataArr=Object.keys(cases).map(function(key){return{day:convertDate(key),value:cases[key]};});setCountryData(dataArr);var deaths=data.timeline.deaths;var dataArrDeaths=Object.keys(deaths).map(function(key){return{day:convertDate(key),value:deaths[key]};});setCountryDeaths(dataArrDeaths);var recovered=data.timeline.recovered;var dataArrRecovered=Object.keys(recovered).map(function(key){return{day:convertDate(key),value:recovered[key]};});setCountryRecovered(dataArrRecovered);});case 1:case\"end\":return _context.stop();}}},_callee);}));return function getCountryData(){return _ref.apply(this,arguments);};}();getCountryData();},[]);var onCountryChange=/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(e){var countryCode;return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:countryCode=e.target.value;fetch(\"https://disease.sh/v3/covid-19/historical/\".concat(countryCode,\"?lastdays=400\")).then(function(response){return response.json();}).then(function(data){if(data.message===\"Country not found or doesn't have any historical data\"){alert(\"Doesn't have any historical data\");}else{var cases=data.timeline.cases;var dataArr=Object.keys(cases).map(function(key){return{day:convertDate(key),value:cases[key]};});setInputCountry(countryCode);setCountryData(dataArr);console.log(countryCode,country,countryData);var maxValCases=findMax(dataArr);console.log(maxValCases);var deaths=data.timeline.deaths;var dataArrDeaths=Object.keys(deaths).map(function(key){return{day:convertDate(key),value:deaths[key]};});setCountryDeaths(dataArrDeaths);var maxValDeaths=findMax(dataArrDeaths);console.log(maxValDeaths);var recovered=data.timeline.recovered;var dataArrRecovered=Object.keys(recovered).map(function(key){return{day:convertDate(key),value:recovered[key]};});setCountryRecovered(dataArrRecovered);var maxValRecovered=findMax(dataArrRecovered);console.log(maxValRecovered);}});case 2:case\"end\":return _context2.stop();}}},_callee2);}));return function onCountryChange(_x){return _ref2.apply(this,arguments);};}();useEffect(function(){var getCountriesData=/*#__PURE__*/function(){var _ref3=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3(){return _regeneratorRuntime.wrap(function _callee3$(_context3){while(1){switch(_context3.prev=_context3.next){case 0:fetch(\"https://disease.sh/v3/covid-19/countries\").then(function(response){return response.json();}).then(function(data){var countries=data.map(function(country){return{name:country.country,value:country.countryInfo.iso2};});setCountries(countries);});case 1:case\"end\":return _context3.stop();}}},_callee3);}));return function getCountriesData(){return _ref3.apply(this,arguments);};}();getCountriesData();},[]);return/*#__PURE__*/React.createElement(\"div\",{className:\"calender__container\"},/*#__PURE__*/React.createElement(\"div\",{className:\"calender__header\"},/*#__PURE__*/React.createElement(\"span\",{className:\"piechart_label\"},\"Select Country \"),/*#__PURE__*/React.createElement(FormControl,{className:\"calender__dropdown\"},/*#__PURE__*/React.createElement(Select,{variant:\"outlined\",value:country,onChange:onCountryChange,className:\"calender__select\"},/*#__PURE__*/React.createElement(MenuItem,{value:\"USA\"},\"USA\"),countries.map(function(country){return/*#__PURE__*/React.createElement(MenuItem,{value:country.value},country.name);})))),/*#__PURE__*/React.createElement(\"div\",{className:\"calender__graphs\"},/*#__PURE__*/React.createElement(\"div\",{style:{height:250,marginBottom:60}},/*#__PURE__*/React.createElement(\"h5\",{className:\"calenderchart__title\"},\"Total COVID Cases - Per Day Distribution\"),/*#__PURE__*/React.createElement(MyResponsiveCalendar,{data:countryData,maxValCases:true})),/*#__PURE__*/React.createElement(\"hr\",null),/*#__PURE__*/React.createElement(\"div\",{style:{height:250,marginBottom:60}},/*#__PURE__*/React.createElement(\"h5\",{className:\"calenderchart__title\"},\"Total COVID Deaths - Per Day Distribution\"),/*#__PURE__*/React.createElement(CalenderCountryDeaths,{data:countryDeaths,maxValDeaths:true})),/*#__PURE__*/React.createElement(\"hr\",null),/*#__PURE__*/React.createElement(\"div\",{style:{height:250,marginBottom:60}},/*#__PURE__*/React.createElement(\"h5\",{className:\"calenderchart__title\"},\"Total COVID Recovered - Per Day Distribution\"),/*#__PURE__*/React.createElement(CalendarCountryRecovered,{data:countryRecovered,maxValRecovered:true}))));};export default CalenderCountriesContainer;","map":{"version":3,"sources":["C:/Users/jazii/Desktop/covid/covid-tracker/src/components/CalenderCharts/CalenderTotalContainer.jsx"],"names":["React","useState","useEffect","MenuItem","FormControl","Select","MyResponsiveCalendar","CalenderCountryDeaths","CalendarCountryRecovered","findMax","convertDate","CalenderCountriesContainer","country","setInputCountry","countries","setCountries","countryData","setCountryData","countryDeaths","setCountryDeaths","countryRecovered","setCountryRecovered","getCountryData","fetch","then","response","json","data","cases","timeline","dataArr","Object","keys","map","key","day","value","deaths","dataArrDeaths","recovered","dataArrRecovered","onCountryChange","e","countryCode","target","message","alert","console","log","maxValCases","maxValDeaths","maxValRecovered","getCountriesData","name","countryInfo","iso2","height","marginBottom"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { MenuItem, FormControl, Select } from \"@material-ui/core\";\r\nimport \"./calender.css\";\r\n\r\nimport MyResponsiveCalendar from \"./CalenderTotalCases\";\r\nimport CalenderCountryDeaths from \"./CalenderTotalDeaths\";\r\nimport CalendarCountryRecovered from \"./CalenderTotalRecovered\";\r\n\r\nimport { findMax, convertDate } from \"./utils\";\r\n\r\nconst CalenderCountriesContainer = () => {\r\n  const [country, setInputCountry] = useState(\"USA\");\r\n  const [countries, setCountries] = useState([]);\r\n  const [countryData, setCountryData] = useState([]);\r\n  const [countryDeaths, setCountryDeaths] = useState([]);\r\n  const [countryRecovered, setCountryRecovered] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const getCountryData = async () => {\r\n      fetch(\"https://disease.sh/v3/covid-19/historical/USA?lastdays=400\")\r\n        .then((response) => response.json())\r\n        .then((data) => {\r\n          const cases = data.timeline.cases;\r\n          const dataArr = Object.keys(cases).map((key) => ({\r\n            day: convertDate(key),\r\n            value: cases[key],\r\n          }));\r\n          setCountryData(dataArr);\r\n\r\n          const deaths = data.timeline.deaths;\r\n          const dataArrDeaths = Object.keys(deaths).map((key) => ({\r\n            day: convertDate(key),\r\n            value: deaths[key],\r\n          }));\r\n\r\n          setCountryDeaths(dataArrDeaths);\r\n\r\n          const recovered = data.timeline.recovered;\r\n          const dataArrRecovered = Object.keys(recovered).map((key) => ({\r\n            day: convertDate(key),\r\n            value: recovered[key],\r\n          }));\r\n\r\n          setCountryRecovered(dataArrRecovered);\r\n        });\r\n    };\r\n\r\n    getCountryData();\r\n  }, []);\r\n\r\n  const onCountryChange = async (e) => {\r\n    const countryCode = e.target.value;\r\n\r\n    fetch(\r\n      `https://disease.sh/v3/covid-19/historical/${countryCode}?lastdays=400`\r\n    )\r\n      .then((response) => response.json())\r\n      .then((data) => {\r\n        if (\r\n          data.message ===\r\n          \"Country not found or doesn't have any historical data\"\r\n        ) {\r\n          alert(\"Doesn't have any historical data\");\r\n        } else {\r\n          const cases = data.timeline.cases;\r\n          const dataArr = Object.keys(cases).map((key) => ({\r\n            day: convertDate(key),\r\n            value: cases[key],\r\n          }));\r\n          setInputCountry(countryCode);\r\n          setCountryData(dataArr);\r\n          console.log(countryCode, country, countryData);\r\n\r\n          const maxValCases = findMax(dataArr);\r\n          console.log(maxValCases);\r\n\r\n          const deaths = data.timeline.deaths;\r\n          const dataArrDeaths = Object.keys(deaths).map((key) => ({\r\n            day: convertDate(key),\r\n            value: deaths[key],\r\n          }));\r\n\r\n          setCountryDeaths(dataArrDeaths);\r\n\r\n          const maxValDeaths = findMax(dataArrDeaths);\r\n          console.log(maxValDeaths);\r\n\r\n          const recovered = data.timeline.recovered;\r\n          const dataArrRecovered = Object.keys(recovered).map((key) => ({\r\n            day: convertDate(key),\r\n            value: recovered[key],\r\n          }));\r\n\r\n          setCountryRecovered(dataArrRecovered);\r\n          const maxValRecovered = findMax(dataArrRecovered);\r\n          console.log(maxValRecovered);\r\n        }\r\n      });\r\n  };\r\n\r\n  useEffect(() => {\r\n    const getCountriesData = async () => {\r\n      fetch(\"https://disease.sh/v3/covid-19/countries\")\r\n        .then((response) => response.json())\r\n        .then((data) => {\r\n          const countries = data.map((country) => ({\r\n            name: country.country,\r\n            value: country.countryInfo.iso2,\r\n          }));\r\n          setCountries(countries);\r\n        });\r\n    };\r\n\r\n    getCountriesData();\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"calender__container\">\r\n      <div className=\"calender__header\">\r\n        <span className=\"piechart_label\">Select Country </span>\r\n        <FormControl className=\"calender__dropdown\">\r\n          <Select\r\n            variant=\"outlined\"\r\n            value={country}\r\n            onChange={onCountryChange}\r\n            className=\"calender__select\"\r\n          >\r\n            <MenuItem value=\"USA\">USA</MenuItem>\r\n            {countries.map((country) => (\r\n              <MenuItem value={country.value}>{country.name}</MenuItem>\r\n            ))}\r\n          </Select>\r\n        </FormControl>\r\n      </div>\r\n      <div className=\"calender__graphs\">\r\n        <div style={{ height: 250, marginBottom: 60 }}>\r\n          <h5 className=\"calenderchart__title\">\r\n            Total COVID Cases - Per Day Distribution\r\n          </h5>\r\n          <MyResponsiveCalendar data={countryData} maxValCases />\r\n        </div>\r\n        <hr />\r\n\r\n        <div style={{ height: 250, marginBottom: 60 }}>\r\n          <h5 className=\"calenderchart__title\">\r\n            Total COVID Deaths - Per Day Distribution\r\n          </h5>\r\n          <CalenderCountryDeaths data={countryDeaths} maxValDeaths />\r\n        </div>\r\n        <hr />\r\n\r\n        <div style={{ height: 250, marginBottom: 60 }}>\r\n          <h5 className=\"calenderchart__title\">\r\n            Total COVID Recovered - Per Day Distribution\r\n          </h5>\r\n          <CalendarCountryRecovered data={countryRecovered} maxValRecovered />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CalenderCountriesContainer;\r\n"]},"metadata":{},"sourceType":"module"}