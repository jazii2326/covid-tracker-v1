{"ast":null,"code":"import _regeneratorRuntime from\"C:\\\\Users\\\\jazii\\\\Desktop\\\\covid\\\\covid-tracker\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";import _asyncToGenerator from\"C:\\\\Users\\\\jazii\\\\Desktop\\\\covid\\\\covid-tracker\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";import _slicedToArray from\"C:\\\\Users\\\\jazii\\\\Desktop\\\\covid\\\\covid-tracker\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";import _objectWithoutProperties from\"C:\\\\Users\\\\jazii\\\\Desktop\\\\covid\\\\covid-tracker\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectWithoutProperties\";import React,{useState,useEffect}from\"react\";import{Line}from\"react-chartjs-2\";import numeral from\"numeral\";import\"./linegraph.css\";var options={legend:{display:false},elements:{point:{radius:0}},maintainAspectRatio:false,tooltips:{mode:\"index\",intersect:false,callbacks:{label:function label(tooltipItem,data){return numeral(tooltipItem.value).format(\"+0,0\");}}},scales:{xAxes:[{type:\"time\",time:{format:\"MM/DD/YY\",tooltipFormat:\"ll\"}}],yAxes:[{gridLines:{display:false},ticks:{// Include a dollar sign in the ticks\ncallback:function callback(value,index,values){return numeral(value).format(\"0a\");}}}]}};var buildDeathRate=function buildDeathRate(data){var chartData1=[];for(var date in data.cases){var newDataPoint={x:date,y:data[\"deaths\"][date]/data[\"recovered\"][date]*100};chartData1.push(newDataPoint);}console.log(chartData1);return chartData1;};var buildChartData=function buildChartData(data,casesType){var chartData=[];var lastDataPoint;for(var date in data.cases){if(lastDataPoint){var newDataPoint={x:date,y:data[casesType][date]-lastDataPoint};chartData.push(newDataPoint);}lastDataPoint=data[casesType][date];}return chartData;};function LineGraph(_ref){var casesType=_ref.casesType,noOfDays=_ref.noOfDays,props=_objectWithoutProperties(_ref,[\"casesType\",\"noOfDays\"]);var _useState=useState({}),_useState2=_slicedToArray(_useState,2),data=_useState2[0],setData=_useState2[1];console.log(props);useEffect(function(){if(props.deathRate){var fetchData=/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return fetch(\"https://disease.sh/v3/covid-19/historical/all?lastdays=\".concat(noOfDays)).then(function(response){return response.json();}).then(function(data){var chartData=buildDeathRate(data,casesType);setData(chartData);console.log(chartData);// buildChart(chartData);\n});case 2:case\"end\":return _context.stop();}}},_callee);}));return function fetchData(){return _ref2.apply(this,arguments);};}();fetchData();}else{var _fetchData=/*#__PURE__*/function(){var _ref3=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(){return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:_context2.next=2;return fetch(\"https://disease.sh/v3/covid-19/historical/all?lastdays=\".concat(noOfDays)).then(function(response){return response.json();}).then(function(data){var chartData=buildChartData(data,casesType);setData(chartData);console.log(chartData);// buildChart(chartData);\n});case 2:case\"end\":return _context2.stop();}}},_callee2);}));return function _fetchData(){return _ref3.apply(this,arguments);};}();_fetchData();}},[casesType,noOfDays]);return/*#__PURE__*/React.createElement(\"div\",{className:props.className},(data===null||data===void 0?void 0:data.length)>0&&/*#__PURE__*/React.createElement(Line,{data:{datasets:[{backgroundColor:\"\".concat(props.lineCh_bgColor),borderColor:\"\".concat(props.lineCh_brColor),data:data}]},options:options}));}export default LineGraph;","map":{"version":3,"sources":["C:/Users/jazii/Desktop/covid/covid-tracker/src/components/LineGraph/LineGraph.js"],"names":["React","useState","useEffect","Line","numeral","options","legend","display","elements","point","radius","maintainAspectRatio","tooltips","mode","intersect","callbacks","label","tooltipItem","data","value","format","scales","xAxes","type","time","tooltipFormat","yAxes","gridLines","ticks","callback","index","values","buildDeathRate","chartData1","date","cases","newDataPoint","x","y","push","console","log","buildChartData","casesType","chartData","lastDataPoint","LineGraph","noOfDays","props","setData","deathRate","fetchData","fetch","then","response","json","className","length","datasets","backgroundColor","lineCh_bgColor","borderColor","lineCh_brColor"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { Line } from \"react-chartjs-2\";\r\nimport numeral from \"numeral\";\r\nimport \"./linegraph.css\";\r\n\r\nconst options = {\r\n  legend: {\r\n    display: false,\r\n  },\r\n  elements: {\r\n    point: {\r\n      radius: 0,\r\n    },\r\n  },\r\n  maintainAspectRatio: false,\r\n  tooltips: {\r\n    mode: \"index\",\r\n    intersect: false,\r\n    callbacks: {\r\n      label: function (tooltipItem, data) {\r\n        return numeral(tooltipItem.value).format(\"+0,0\");\r\n      },\r\n    },\r\n  },\r\n  scales: {\r\n    xAxes: [\r\n      {\r\n        type: \"time\",\r\n        time: {\r\n          format: \"MM/DD/YY\",\r\n          tooltipFormat: \"ll\",\r\n        },\r\n      },\r\n    ],\r\n    yAxes: [\r\n      {\r\n        gridLines: {\r\n          display: false,\r\n        },\r\n        ticks: {\r\n          // Include a dollar sign in the ticks\r\n          callback: function (value, index, values) {\r\n            return numeral(value).format(\"0a\");\r\n          },\r\n        },\r\n      },\r\n    ],\r\n  },\r\n};\r\n\r\nconst buildDeathRate = (data) => {\r\n  let chartData1 = [];\r\n  for (let date in data.cases) {\r\n    let newDataPoint = {\r\n      x: date,\r\n      y: (data[\"deaths\"][date] / data[\"recovered\"][date]) * 100,\r\n    };\r\n    chartData1.push(newDataPoint);\r\n  }\r\n  console.log(chartData1);\r\n  return chartData1;\r\n};\r\n\r\nconst buildChartData = (data, casesType) => {\r\n  let chartData = [];\r\n  let lastDataPoint;\r\n  for (let date in data.cases) {\r\n    if (lastDataPoint) {\r\n      let newDataPoint = {\r\n        x: date,\r\n        y: data[casesType][date] - lastDataPoint,\r\n      };\r\n      chartData.push(newDataPoint);\r\n    }\r\n    lastDataPoint = data[casesType][date];\r\n  }\r\n  return chartData;\r\n};\r\n\r\nfunction LineGraph({ casesType, noOfDays, ...props }) {\r\n  const [data, setData] = useState({});\r\n  console.log(props);\r\n  useEffect(() => {\r\n    if (props.deathRate) {\r\n      const fetchData = async () => {\r\n        await fetch(\r\n          `https://disease.sh/v3/covid-19/historical/all?lastdays=${noOfDays}`\r\n        )\r\n          .then((response) => {\r\n            return response.json();\r\n          })\r\n          .then((data) => {\r\n            let chartData = buildDeathRate(data, casesType);\r\n            setData(chartData);\r\n            console.log(chartData);\r\n            // buildChart(chartData);\r\n          });\r\n      };\r\n\r\n      fetchData();\r\n    } else {\r\n      const fetchData = async () => {\r\n        await fetch(\r\n          `https://disease.sh/v3/covid-19/historical/all?lastdays=${noOfDays}`\r\n        )\r\n          .then((response) => {\r\n            return response.json();\r\n          })\r\n          .then((data) => {\r\n            let chartData = buildChartData(data, casesType);\r\n            setData(chartData);\r\n            console.log(chartData);\r\n            // buildChart(chartData);\r\n          });\r\n      };\r\n\r\n      fetchData();\r\n    }\r\n  }, [casesType, noOfDays]);\r\n\r\n  return (\r\n    <div className={props.className}>\r\n      {data?.length > 0 && (\r\n        <Line\r\n          data={{\r\n            datasets: [\r\n              {\r\n                backgroundColor: `${props.lineCh_bgColor}`,\r\n                borderColor: `${props.lineCh_brColor}`,\r\n                data: data,\r\n              },\r\n            ],\r\n          }}\r\n          options={options}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default LineGraph;\r\n"]},"metadata":{},"sourceType":"module"}