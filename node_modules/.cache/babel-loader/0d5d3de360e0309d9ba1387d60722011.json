{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\jazii\\\\Desktop\\\\covid\\\\covid-tracker\\\\src\\\\components\\\\GeoAnalysis\\\\MapContainer.jsx\";\nimport React, { useState, useEffect } from \"react\";\nimport \"./mapcontainer.css\";\nimport { MenuItem, FormControl, Select, Card, CardContent } from \"@material-ui/core\";\nimport InfoBox from \"./InfoBox\";\nimport { sortData, prettyPrintStat } from \"./util\";\nimport numeral from \"numeral\";\nimport Map from \"./Map\";\nimport \"leaflet/dist/leaflet.css\";\n\nconst MapContainer = () => {\n  const [country, setInputCountry] = useState(\"worldwide\");\n  const [countryInfo, setCountryInfo] = useState({});\n  const [countries, setCountries] = useState([]);\n  const [mapCountries, setMapCountries] = useState([]);\n  const [tableData, setTableData] = useState([]);\n  const [casesType, setCasesType] = useState(\"cases\");\n  const [mapCenter, setMapCenter] = useState({\n    lat: 34.80746,\n    lng: -40.4796\n  });\n  const [mapZoom, setMapZoom] = useState(3);\n  useEffect(() => {\n    fetch(\"https://disease.sh/v3/covid-19/all\").then(response => response.json()).then(data => {\n      setCountryInfo(data);\n    });\n  }, []);\n  useEffect(() => {\n    const getCountriesData = async () => {\n      fetch(\"https://disease.sh/v3/covid-19/countries\").then(response => response.json()).then(data => {\n        const countries = data.map(country => ({\n          name: country.country,\n          value: country.countryInfo.iso2\n        }));\n        let sortedData = sortData(data);\n        setCountries(countries);\n        setMapCountries(data);\n      });\n    };\n\n    getCountriesData();\n  }, []);\n  console.log(casesType);\n\n  const onCountryChange = async e => {\n    const countryCode = e.target.value;\n    const url = countryCode === \"worldwide\" ? \"https://disease.sh/v3/covid-19/all\" : `https://disease.sh/v3/covid-19/countries/${countryCode}`;\n    await fetch(url).then(response => response.json()).then(data => {\n      setInputCountry(countryCode);\n      setCountryInfo(data);\n      countryCode === \"worldwide\" ? setMapCenter([34.80746, -40.4796]) : setMapCenter([data.countryInfo.lat, data.countryInfo.long]);\n      countryCode === \"worldwide\" ? setMapZoom(3) : setMapZoom(4);\n    });\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"leafletmap__container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"app__header\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 9\n    }\n  }, \"Geographical Mapping\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"leafletmap__subheader\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    className: \"leafletmap__label\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 11\n    }\n  }, \"Select any country to zoom-in\"), /*#__PURE__*/React.createElement(FormControl, {\n    className: \"leafletmap__dropdown\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Select, {\n    variant: \"outlined\",\n    value: country,\n    onChange: onCountryChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(MenuItem, {\n    value: \"worldwide\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 15\n    }\n  }, \"Worldwide\"), countries.map(country => /*#__PURE__*/React.createElement(MenuItem, {\n    value: country.value,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 17\n    }\n  }, country.name)))))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"app__stats\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(InfoBox, {\n    onClick: e => setCasesType(\"cases\"),\n    title: \"Coronavirus Cases\",\n    isRed: true,\n    active: casesType === \"cases\",\n    cases: prettyPrintStat(countryInfo.todayCases),\n    total: numeral(countryInfo.cases).format(\"0.0a\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(InfoBox, {\n    onClick: e => setCasesType(\"recovered\"),\n    title: \"Recovered\",\n    active: casesType === \"recovered\",\n    cases: prettyPrintStat(countryInfo.todayRecovered),\n    total: numeral(countryInfo.recovered).format(\"0.0a\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(InfoBox, {\n    onClick: e => setCasesType(\"deaths\"),\n    title: \"Deaths\",\n    isRed: true,\n    active: casesType === \"deaths\",\n    cases: prettyPrintStat(countryInfo.todayDeaths),\n    total: numeral(countryInfo.deaths).format(\"0.0a\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(Map, {\n    countries: mapCountries,\n    casesType: casesType,\n    center: mapCenter,\n    zoom: mapZoom,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 7\n    }\n  }));\n};\n\nexport default MapContainer;","map":{"version":3,"sources":["C:/Users/jazii/Desktop/covid/covid-tracker/src/components/GeoAnalysis/MapContainer.jsx"],"names":["React","useState","useEffect","MenuItem","FormControl","Select","Card","CardContent","InfoBox","sortData","prettyPrintStat","numeral","Map","MapContainer","country","setInputCountry","countryInfo","setCountryInfo","countries","setCountries","mapCountries","setMapCountries","tableData","setTableData","casesType","setCasesType","mapCenter","setMapCenter","lat","lng","mapZoom","setMapZoom","fetch","then","response","json","data","getCountriesData","map","name","value","iso2","sortedData","console","log","onCountryChange","e","countryCode","target","url","long","todayCases","cases","format","todayRecovered","recovered","todayDeaths","deaths"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport \"./mapcontainer.css\";\r\nimport {\r\n  MenuItem,\r\n  FormControl,\r\n  Select,\r\n  Card,\r\n  CardContent,\r\n} from \"@material-ui/core\";\r\nimport InfoBox from \"./InfoBox\";\r\nimport { sortData, prettyPrintStat } from \"./util\";\r\nimport numeral from \"numeral\";\r\nimport Map from \"./Map\";\r\nimport \"leaflet/dist/leaflet.css\";\r\n\r\nconst MapContainer = () => {\r\n  const [country, setInputCountry] = useState(\"worldwide\");\r\n  const [countryInfo, setCountryInfo] = useState({});\r\n  const [countries, setCountries] = useState([]);\r\n  const [mapCountries, setMapCountries] = useState([]);\r\n  const [tableData, setTableData] = useState([]);\r\n  const [casesType, setCasesType] = useState(\"cases\");\r\n  const [mapCenter, setMapCenter] = useState({ lat: 34.80746, lng: -40.4796 });\r\n  const [mapZoom, setMapZoom] = useState(3);\r\n\r\n  useEffect(() => {\r\n    fetch(\"https://disease.sh/v3/covid-19/all\")\r\n      .then((response) => response.json())\r\n      .then((data) => {\r\n        setCountryInfo(data);\r\n      });\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    const getCountriesData = async () => {\r\n      fetch(\"https://disease.sh/v3/covid-19/countries\")\r\n        .then((response) => response.json())\r\n        .then((data) => {\r\n          const countries = data.map((country) => ({\r\n            name: country.country,\r\n            value: country.countryInfo.iso2,\r\n          }));\r\n          let sortedData = sortData(data);\r\n          setCountries(countries);\r\n          setMapCountries(data);\r\n        });\r\n    };\r\n\r\n    getCountriesData();\r\n  }, []);\r\n\r\n  console.log(casesType);\r\n\r\n  const onCountryChange = async (e) => {\r\n    const countryCode = e.target.value;\r\n\r\n    const url =\r\n      countryCode === \"worldwide\"\r\n        ? \"https://disease.sh/v3/covid-19/all\"\r\n        : `https://disease.sh/v3/covid-19/countries/${countryCode}`;\r\n    await fetch(url)\r\n      .then((response) => response.json())\r\n      .then((data) => {\r\n        setInputCountry(countryCode);\r\n        setCountryInfo(data);\r\n        countryCode === \"worldwide\"\r\n          ? setMapCenter([34.80746, -40.4796])\r\n          : setMapCenter([data.countryInfo.lat, data.countryInfo.long]);\r\n\r\n        countryCode === \"worldwide\" ? setMapZoom(3) : setMapZoom(4);\r\n      });\r\n  };\r\n\r\n  return (\r\n    <div className='leafletmap__container'>\r\n      <div className='app__header'>\r\n        <h1>Geographical Mapping</h1>\r\n        <div className='leafletmap__subheader'>\r\n          <span className='leafletmap__label'>\r\n            Select any country to zoom-in\r\n          </span>\r\n          <FormControl className='leafletmap__dropdown'>\r\n            <Select\r\n              variant='outlined'\r\n              value={country}\r\n              onChange={onCountryChange}\r\n            >\r\n              <MenuItem value='worldwide'>Worldwide</MenuItem>\r\n              {countries.map((country) => (\r\n                <MenuItem value={country.value}>{country.name}</MenuItem>\r\n              ))}\r\n            </Select>\r\n          </FormControl>\r\n        </div>\r\n      </div>\r\n      <div className='app__stats'>\r\n        <InfoBox\r\n          onClick={(e) => setCasesType(\"cases\")}\r\n          title='Coronavirus Cases'\r\n          isRed\r\n          active={casesType === \"cases\"}\r\n          cases={prettyPrintStat(countryInfo.todayCases)}\r\n          total={numeral(countryInfo.cases).format(\"0.0a\")}\r\n        />\r\n        <InfoBox\r\n          onClick={(e) => setCasesType(\"recovered\")}\r\n          title='Recovered'\r\n          active={casesType === \"recovered\"}\r\n          cases={prettyPrintStat(countryInfo.todayRecovered)}\r\n          total={numeral(countryInfo.recovered).format(\"0.0a\")}\r\n        />\r\n        <InfoBox\r\n          onClick={(e) => setCasesType(\"deaths\")}\r\n          title='Deaths'\r\n          isRed\r\n          active={casesType === \"deaths\"}\r\n          cases={prettyPrintStat(countryInfo.todayDeaths)}\r\n          total={numeral(countryInfo.deaths).format(\"0.0a\")}\r\n        />\r\n      </div>\r\n      <Map\r\n        countries={mapCountries}\r\n        casesType={casesType}\r\n        center={mapCenter}\r\n        zoom={mapZoom}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MapContainer;\r\n"]},"metadata":{},"sourceType":"module"}