{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\jazii\\\\Desktop\\\\covid\\\\covid-tracker\\\\src\\\\components\\\\CountryLineGraph\\\\CountryLineGraphForTotal.jsx\";\nimport React, { useState, useEffect } from \"react\";\nimport { Line } from \"react-chartjs-2\";\nimport numeral from \"numeral\";\nimport \"./linegraph.css\";\nconst options = {\n  legend: {\n    display: false\n  },\n  elements: {\n    point: {\n      radius: 0\n    }\n  },\n  maintainAspectRatio: false,\n  tooltips: {\n    mode: \"index\",\n    intersect: false,\n    callbacks: {\n      label: function (tooltipItem, data) {\n        return numeral(tooltipItem.value).format(\"+0,0\");\n      }\n    }\n  },\n  scales: {\n    xAxes: [{\n      type: \"time\",\n      time: {\n        format: \"MM/DD/YY\",\n        tooltipFormat: \"ll\"\n      }\n    }],\n    yAxes: [{\n      gridLines: {\n        display: false\n      },\n      ticks: {\n        // Include a dollar sign in the ticks\n        callback: function (value, index, values) {\n          return numeral(value).format(\"0a\");\n        }\n      }\n    }]\n  }\n};\n\nconst buildChartDataForTotal = (data, casesType) => {\n  let chartData = [];\n\n  for (let date in data.cases) {\n    let newDataPoint = {\n      x: date,\n      y: data[casesType][date]\n    };\n    chartData.push(newDataPoint);\n  }\n\n  return chartData;\n};\n\nfunction LineGraphForTotal({\n  casesType,\n  countryCode,\n  ...props\n}) {\n  const [data, setData] = useState({});\n  console.log(props, countryCode);\n  useEffect(() => {\n    const fetchData = async () => {\n      await fetch(`https://disease.sh/v3/covid-19/historical/${countryCode}?lastdays=60`).then(response => {\n        return response.json();\n      }).then(data => {\n        const allData = data.timeline;\n        let chartData = buildChartDataForTotal(allData, casesType);\n        setData(chartData);\n        console.log(chartData); // buildChart(chartData);\n      });\n    };\n\n    fetchData();\n  }, [casesType, countryCode]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: props.className,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 5\n    }\n  }, (data === null || data === void 0 ? void 0 : data.length) > 0 && /*#__PURE__*/React.createElement(Line, {\n    data: {\n      datasets: [{\n        backgroundColor: `${props.lineCh_bgColor}`,\n        borderColor: `${props.lineCh_brColor}`,\n        data: data\n      }]\n    },\n    options: options,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 9\n    }\n  }));\n}\n\nexport default LineGraphForTotal;","map":{"version":3,"sources":["C:/Users/jazii/Desktop/covid/covid-tracker/src/components/CountryLineGraph/CountryLineGraphForTotal.jsx"],"names":["React","useState","useEffect","Line","numeral","options","legend","display","elements","point","radius","maintainAspectRatio","tooltips","mode","intersect","callbacks","label","tooltipItem","data","value","format","scales","xAxes","type","time","tooltipFormat","yAxes","gridLines","ticks","callback","index","values","buildChartDataForTotal","casesType","chartData","date","cases","newDataPoint","x","y","push","LineGraphForTotal","countryCode","props","setData","console","log","fetchData","fetch","then","response","json","allData","timeline","className","length","datasets","backgroundColor","lineCh_bgColor","borderColor","lineCh_brColor"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { Line } from \"react-chartjs-2\";\r\nimport numeral from \"numeral\";\r\nimport \"./linegraph.css\";\r\n\r\nconst options = {\r\n  legend: {\r\n    display: false,\r\n  },\r\n  elements: {\r\n    point: {\r\n      radius: 0,\r\n    },\r\n  },\r\n  maintainAspectRatio: false,\r\n  tooltips: {\r\n    mode: \"index\",\r\n    intersect: false,\r\n    callbacks: {\r\n      label: function (tooltipItem, data) {\r\n        return numeral(tooltipItem.value).format(\"+0,0\");\r\n      },\r\n    },\r\n  },\r\n  scales: {\r\n    xAxes: [\r\n      {\r\n        type: \"time\",\r\n        time: {\r\n          format: \"MM/DD/YY\",\r\n          tooltipFormat: \"ll\",\r\n        },\r\n      },\r\n    ],\r\n    yAxes: [\r\n      {\r\n        gridLines: {\r\n          display: false,\r\n        },\r\n        ticks: {\r\n          // Include a dollar sign in the ticks\r\n          callback: function (value, index, values) {\r\n            return numeral(value).format(\"0a\");\r\n          },\r\n        },\r\n      },\r\n    ],\r\n  },\r\n};\r\n\r\nconst buildChartDataForTotal = (data, casesType) => {\r\n  let chartData = [];\r\n  for (let date in data.cases) {\r\n    let newDataPoint = {\r\n      x: date,\r\n      y: data[casesType][date],\r\n    };\r\n    chartData.push(newDataPoint);\r\n  }\r\n  return chartData;\r\n};\r\n\r\nfunction LineGraphForTotal({ casesType, countryCode, ...props }) {\r\n  const [data, setData] = useState({});\r\n  console.log(props, countryCode);\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      await fetch(\r\n        `https://disease.sh/v3/covid-19/historical/${countryCode}?lastdays=60`\r\n      )\r\n        .then((response) => {\r\n          return response.json();\r\n        })\r\n        .then((data) => {\r\n          const allData = data.timeline;\r\n          let chartData = buildChartDataForTotal(allData, casesType);\r\n          setData(chartData);\r\n          console.log(chartData);\r\n          // buildChart(chartData);\r\n        });\r\n    };\r\n\r\n    fetchData();\r\n  }, [casesType, countryCode]);\r\n\r\n  return (\r\n    <div className={props.className}>\r\n      {data?.length > 0 && (\r\n        <Line\r\n          data={{\r\n            datasets: [\r\n              {\r\n                backgroundColor: `${props.lineCh_bgColor}`,\r\n                borderColor: `${props.lineCh_brColor}`,\r\n                data: data,\r\n              },\r\n            ],\r\n          }}\r\n          options={options}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default LineGraphForTotal;\r\n"]},"metadata":{},"sourceType":"module"}